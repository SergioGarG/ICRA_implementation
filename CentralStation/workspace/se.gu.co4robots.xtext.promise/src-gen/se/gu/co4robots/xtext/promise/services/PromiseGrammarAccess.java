/*
 * generated by Xtext 2.12.0
 */
package se.gu.co4robots.xtext.promise.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PromiseGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.Mission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMissionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cConditionsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cEventsKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cEventsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cEventsEventParserRuleCall_2_2_1_0 = (RuleCall)cEventsAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_2_2 = (Group)cGroup_2_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_2_0 = (Keyword)cGroup_2_2_2.eContents().get(0);
		private final Assignment cEventsAssignment_2_2_2_1 = (Assignment)cGroup_2_2_2.eContents().get(1);
		private final RuleCall cEventsEventParserRuleCall_2_2_2_1_0 = (RuleCall)cEventsAssignment_2_2_2_1.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cActionsKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cActionsAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_2_3_1_0 = (RuleCall)cActionsAssignment_2_3_1.eContents().get(0);
		private final Group cGroup_2_3_2 = (Group)cGroup_2_3.eContents().get(2);
		private final Keyword cCommaKeyword_2_3_2_0 = (Keyword)cGroup_2_3_2.eContents().get(0);
		private final Assignment cActionsAssignment_2_3_2_1 = (Assignment)cGroup_2_3_2.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_2_3_2_1_0 = (RuleCall)cActionsAssignment_2_3_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Keyword cRobotsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRobotsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRobotsRobotParserRuleCall_4_0 = (RuleCall)cRobotsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRobotsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRobotsRobotParserRuleCall_5_1_0 = (RuleCall)cRobotsAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLocationsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cLocationsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cLocationsLocationParserRuleCall_6_1_0 = (RuleCall)cLocationsAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cLocationsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cLocationsLocationParserRuleCall_6_2_1_0 = (RuleCall)cLocationsAssignment_6_2_1.eContents().get(0);
		private final Keyword cOperatorsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cOperatorAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cOperatorOperatorParserRuleCall_9_0 = (RuleCall)cOperatorAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cCommaKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cOperatorAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cOperatorOperatorParserRuleCall_10_1_0 = (RuleCall)cOperatorAssignment_10_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Mission:
		//	'mission'
		//	'{' ('conditions' '{' ('events' events+=Event ("," events+=Event)*)? ('actions' actions+=Action (","
		//	actions+=Action)*)? '}')?
		//	'robots' robots+=Robot ("," robots+=Robot)* ('locations' locations+=Location ("," locations+=Location)*)?
		//	'operators' '{' operator+=Operator ("," operator+=Operator)* '}'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'mission' '{' ('conditions' '{' ('events' events+=Event ("," events+=Event)*)? ('actions' actions+=Action (","
		//actions+=Action)*)? '}')? 'robots' robots+=Robot ("," robots+=Robot)* ('locations' locations+=Location (","
		//locations+=Location)*)? 'operators' '{' operator+=Operator ("," operator+=Operator)* '}' '}'
		public Group getGroup() { return cGroup; }
		
		//'mission'
		public Keyword getMissionKeyword_0() { return cMissionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('conditions' '{' ('events' events+=Event ("," events+=Event)*)? ('actions' actions+=Action ("," actions+=Action)*)?
		//'}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'conditions'
		public Keyword getConditionsKeyword_2_0() { return cConditionsKeyword_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//('events' events+=Event ("," events+=Event)*)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'events'
		public Keyword getEventsKeyword_2_2_0() { return cEventsKeyword_2_2_0; }
		
		//events+=Event
		public Assignment getEventsAssignment_2_2_1() { return cEventsAssignment_2_2_1; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_2_2_1_0() { return cEventsEventParserRuleCall_2_2_1_0; }
		
		//("," events+=Event)*
		public Group getGroup_2_2_2() { return cGroup_2_2_2; }
		
		//","
		public Keyword getCommaKeyword_2_2_2_0() { return cCommaKeyword_2_2_2_0; }
		
		//events+=Event
		public Assignment getEventsAssignment_2_2_2_1() { return cEventsAssignment_2_2_2_1; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_2_2_2_1_0() { return cEventsEventParserRuleCall_2_2_2_1_0; }
		
		//('actions' actions+=Action ("," actions+=Action)*)?
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//'actions'
		public Keyword getActionsKeyword_2_3_0() { return cActionsKeyword_2_3_0; }
		
		//actions+=Action
		public Assignment getActionsAssignment_2_3_1() { return cActionsAssignment_2_3_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_2_3_1_0() { return cActionsActionParserRuleCall_2_3_1_0; }
		
		//("," actions+=Action)*
		public Group getGroup_2_3_2() { return cGroup_2_3_2; }
		
		//","
		public Keyword getCommaKeyword_2_3_2_0() { return cCommaKeyword_2_3_2_0; }
		
		//actions+=Action
		public Assignment getActionsAssignment_2_3_2_1() { return cActionsAssignment_2_3_2_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_2_3_2_1_0() { return cActionsActionParserRuleCall_2_3_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
		
		//'robots'
		public Keyword getRobotsKeyword_3() { return cRobotsKeyword_3; }
		
		//robots+=Robot
		public Assignment getRobotsAssignment_4() { return cRobotsAssignment_4; }
		
		//Robot
		public RuleCall getRobotsRobotParserRuleCall_4_0() { return cRobotsRobotParserRuleCall_4_0; }
		
		//("," robots+=Robot)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//robots+=Robot
		public Assignment getRobotsAssignment_5_1() { return cRobotsAssignment_5_1; }
		
		//Robot
		public RuleCall getRobotsRobotParserRuleCall_5_1_0() { return cRobotsRobotParserRuleCall_5_1_0; }
		
		//('locations' locations+=Location ("," locations+=Location)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'locations'
		public Keyword getLocationsKeyword_6_0() { return cLocationsKeyword_6_0; }
		
		//locations+=Location
		public Assignment getLocationsAssignment_6_1() { return cLocationsAssignment_6_1; }
		
		//Location
		public RuleCall getLocationsLocationParserRuleCall_6_1_0() { return cLocationsLocationParserRuleCall_6_1_0; }
		
		//("," locations+=Location)*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//","
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }
		
		//locations+=Location
		public Assignment getLocationsAssignment_6_2_1() { return cLocationsAssignment_6_2_1; }
		
		//Location
		public RuleCall getLocationsLocationParserRuleCall_6_2_1_0() { return cLocationsLocationParserRuleCall_6_2_1_0; }
		
		//'operators'
		public Keyword getOperatorsKeyword_7() { return cOperatorsKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//operator+=Operator
		public Assignment getOperatorAssignment_9() { return cOperatorAssignment_9; }
		
		//Operator
		public RuleCall getOperatorOperatorParserRuleCall_9_0() { return cOperatorOperatorParserRuleCall_9_0; }
		
		//("," operator+=Operator)*
		public Group getGroup_10() { return cGroup_10; }
		
		//","
		public Keyword getCommaKeyword_10_0() { return cCommaKeyword_10_0; }
		
		//operator+=Operator
		public Assignment getOperatorAssignment_10_1() { return cOperatorAssignment_10_1; }
		
		//Operator
		public RuleCall getOperatorOperatorParserRuleCall_10_1_0() { return cOperatorOperatorParserRuleCall_10_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFallBackOpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSequenceOpParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParallelOpParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEventHandlerOpParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConditionOpParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDelegateOpParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cANDOpParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cOROpParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//Operator:
		//	FallBackOp | SequenceOp | ParallelOp | EventHandlerOp | ConditionOp | DelegateOp | ANDOp | OROp;
		@Override public ParserRule getRule() { return rule; }
		
		//FallBackOp | SequenceOp | ParallelOp | EventHandlerOp | ConditionOp | DelegateOp | ANDOp | OROp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FallBackOp
		public RuleCall getFallBackOpParserRuleCall_0() { return cFallBackOpParserRuleCall_0; }
		
		//SequenceOp
		public RuleCall getSequenceOpParserRuleCall_1() { return cSequenceOpParserRuleCall_1; }
		
		//ParallelOp
		public RuleCall getParallelOpParserRuleCall_2() { return cParallelOpParserRuleCall_2; }
		
		//EventHandlerOp
		public RuleCall getEventHandlerOpParserRuleCall_3() { return cEventHandlerOpParserRuleCall_3; }
		
		//ConditionOp
		public RuleCall getConditionOpParserRuleCall_4() { return cConditionOpParserRuleCall_4; }
		
		//DelegateOp
		public RuleCall getDelegateOpParserRuleCall_5() { return cDelegateOpParserRuleCall_5; }
		
		//ANDOp
		public RuleCall getANDOpParserRuleCall_6() { return cANDOpParserRuleCall_6; }
		
		//OROp
		public RuleCall getOROpParserRuleCall_7() { return cOROpParserRuleCall_7; }
	}
	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.Pattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVisitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSequencedVisitParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOrderderVisitParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStrictOrderedVisitParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFairVisitParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPatrollingParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSequencedPatrollingParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cOrderedPatrollingParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cStrictOreredPatrollingParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cFairPatrollingParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cUpperRestrictedAvoidanceParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cExactRestrictedAvoidanceParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cLowerRestrictedAvoidanceParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cFutureAvoidanceParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cGlobalAvoidanceParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cPastAvoidanceParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cWaitParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		private final RuleCall cDelayedReactionParserRuleCall_18 = (RuleCall)cAlternatives.eContents().get(18);
		private final RuleCall cInstantReactionParserRuleCall_19 = (RuleCall)cAlternatives.eContents().get(19);
		
		//Pattern:
		//	SimpleAction | Visit | SequencedVisit | OrderderVisit | StrictOrderedVisit | FairVisit | Patrolling |
		//	SequencedPatrolling | OrderedPatrolling | StrictOreredPatrolling | FairPatrolling | UpperRestrictedAvoidance |
		//	ExactRestrictedAvoidance | LowerRestrictedAvoidance | FutureAvoidance | GlobalAvoidance | PastAvoidance | Wait |
		//	DelayedReaction | InstantReaction;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleAction | Visit | SequencedVisit | OrderderVisit | StrictOrderedVisit | FairVisit | Patrolling |
		//SequencedPatrolling | OrderedPatrolling | StrictOreredPatrolling | FairPatrolling | UpperRestrictedAvoidance |
		//ExactRestrictedAvoidance | LowerRestrictedAvoidance | FutureAvoidance | GlobalAvoidance | PastAvoidance | Wait |
		//DelayedReaction | InstantReaction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleAction
		public RuleCall getSimpleActionParserRuleCall_0() { return cSimpleActionParserRuleCall_0; }
		
		//Visit
		public RuleCall getVisitParserRuleCall_1() { return cVisitParserRuleCall_1; }
		
		//SequencedVisit
		public RuleCall getSequencedVisitParserRuleCall_2() { return cSequencedVisitParserRuleCall_2; }
		
		//OrderderVisit
		public RuleCall getOrderderVisitParserRuleCall_3() { return cOrderderVisitParserRuleCall_3; }
		
		//StrictOrderedVisit
		public RuleCall getStrictOrderedVisitParserRuleCall_4() { return cStrictOrderedVisitParserRuleCall_4; }
		
		//FairVisit
		public RuleCall getFairVisitParserRuleCall_5() { return cFairVisitParserRuleCall_5; }
		
		//Patrolling
		public RuleCall getPatrollingParserRuleCall_6() { return cPatrollingParserRuleCall_6; }
		
		//SequencedPatrolling
		public RuleCall getSequencedPatrollingParserRuleCall_7() { return cSequencedPatrollingParserRuleCall_7; }
		
		//OrderedPatrolling
		public RuleCall getOrderedPatrollingParserRuleCall_8() { return cOrderedPatrollingParserRuleCall_8; }
		
		//StrictOreredPatrolling
		public RuleCall getStrictOreredPatrollingParserRuleCall_9() { return cStrictOreredPatrollingParserRuleCall_9; }
		
		//FairPatrolling
		public RuleCall getFairPatrollingParserRuleCall_10() { return cFairPatrollingParserRuleCall_10; }
		
		//UpperRestrictedAvoidance
		public RuleCall getUpperRestrictedAvoidanceParserRuleCall_11() { return cUpperRestrictedAvoidanceParserRuleCall_11; }
		
		//ExactRestrictedAvoidance
		public RuleCall getExactRestrictedAvoidanceParserRuleCall_12() { return cExactRestrictedAvoidanceParserRuleCall_12; }
		
		//LowerRestrictedAvoidance
		public RuleCall getLowerRestrictedAvoidanceParserRuleCall_13() { return cLowerRestrictedAvoidanceParserRuleCall_13; }
		
		//FutureAvoidance
		public RuleCall getFutureAvoidanceParserRuleCall_14() { return cFutureAvoidanceParserRuleCall_14; }
		
		//GlobalAvoidance
		public RuleCall getGlobalAvoidanceParserRuleCall_15() { return cGlobalAvoidanceParserRuleCall_15; }
		
		//PastAvoidance
		public RuleCall getPastAvoidanceParserRuleCall_16() { return cPastAvoidanceParserRuleCall_16; }
		
		//Wait
		public RuleCall getWaitParserRuleCall_17() { return cWaitParserRuleCall_17; }
		
		//DelayedReaction
		public RuleCall getDelayedReactionParserRuleCall_18() { return cDelayedReactionParserRuleCall_18; }
		
		//InstantReaction
		public RuleCall getInstantReactionParserRuleCall_19() { return cInstantReactionParserRuleCall_19; }
	}
	public class RobotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.Robot");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Robot:
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0() { return cNameEStringParserRuleCall_0; }
	}
	public class LocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.Location");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		///////////////////////////////////////// Locations
		//Location:
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0() { return cNameEStringParserRuleCall_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionEStringParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		///////////////////////////////////////// Conditions
		//Event:
		//	name=ID ':' description=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' description=EString
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//description=EString
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//EString
		public RuleCall getDescriptionEStringParserRuleCall_2_0() { return cDescriptionEStringParserRuleCall_2_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionEStringParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//Action:
		//	name=ID ':' description=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' description=EString
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//description=EString
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//EString
		public RuleCall getDescriptionEStringParserRuleCall_2_0() { return cDescriptionEStringParserRuleCall_2_0; }
	}
	public class FallBackOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.FallBackOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFallbackKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInputOperatorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInputOperatorsOperatorParserRuleCall_2_0 = (RuleCall)cInputOperatorsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInputOperatorsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInputOperatorsOperatorParserRuleCall_3_1_0 = (RuleCall)cInputOperatorsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///////////////////////////////////////// Operators
		//FallBackOp:
		//	'fallback' '(' inputOperators+=Operator ("," inputOperators+=Operator)*
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'fallback' '(' inputOperators+=Operator ("," inputOperators+=Operator)* ')'
		public Group getGroup() { return cGroup; }
		
		//'fallback'
		public Keyword getFallbackKeyword_0() { return cFallbackKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//inputOperators+=Operator
		public Assignment getInputOperatorsAssignment_2() { return cInputOperatorsAssignment_2; }
		
		//Operator
		public RuleCall getInputOperatorsOperatorParserRuleCall_2_0() { return cInputOperatorsOperatorParserRuleCall_2_0; }
		
		//("," inputOperators+=Operator)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//inputOperators+=Operator
		public Assignment getInputOperatorsAssignment_3_1() { return cInputOperatorsAssignment_3_1; }
		
		//Operator
		public RuleCall getInputOperatorsOperatorParserRuleCall_3_1_0() { return cInputOperatorsOperatorParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class SequenceOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.SequenceOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSequenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInputOperatorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInputOperatorsOperatorParserRuleCall_2_0 = (RuleCall)cInputOperatorsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInputOperatorsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInputOperatorsOperatorParserRuleCall_3_1_0 = (RuleCall)cInputOperatorsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SequenceOp:
		//	'sequence' '(' inputOperators+=Operator ("," inputOperators+=Operator)*
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'sequence' '(' inputOperators+=Operator ("," inputOperators+=Operator)* ')'
		public Group getGroup() { return cGroup; }
		
		//'sequence'
		public Keyword getSequenceKeyword_0() { return cSequenceKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//inputOperators+=Operator
		public Assignment getInputOperatorsAssignment_2() { return cInputOperatorsAssignment_2; }
		
		//Operator
		public RuleCall getInputOperatorsOperatorParserRuleCall_2_0() { return cInputOperatorsOperatorParserRuleCall_2_0; }
		
		//("," inputOperators+=Operator)*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//inputOperators+=Operator
		public Assignment getInputOperatorsAssignment_3_1() { return cInputOperatorsAssignment_3_1; }
		
		//Operator
		public RuleCall getInputOperatorsOperatorParserRuleCall_3_1_0() { return cInputOperatorsOperatorParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ParallelOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.ParallelOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParallelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInputRobotsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cInputRobotsRobotCrossReference_2_0 = (CrossReference)cInputRobotsAssignment_2.eContents().get(0);
		private final RuleCall cInputRobotsRobotEStringParserRuleCall_2_0_1 = (RuleCall)cInputRobotsRobotCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInputOperatorsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInputOperatorsOperatorParserRuleCall_4_0 = (RuleCall)cInputOperatorsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInputRobotsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cInputRobotsRobotCrossReference_6_1_0 = (CrossReference)cInputRobotsAssignment_6_1.eContents().get(0);
		private final RuleCall cInputRobotsRobotEStringParserRuleCall_6_1_0_1 = (RuleCall)cInputRobotsRobotCrossReference_6_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cInputOperatorsAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cInputOperatorsOperatorParserRuleCall_6_3_0 = (RuleCall)cInputOperatorsAssignment_6_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ParallelOp:
		//	'parallel' '{' inputRobots+=[Robot|EString] '(' inputOperators+=Operator ')' ("," inputRobots+=[Robot|EString] '('
		//	inputOperators+=Operator ')')* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'parallel' '{' inputRobots+=[Robot|EString] '(' inputOperators+=Operator ')' ("," inputRobots+=[Robot|EString] '('
		//inputOperators+=Operator ')')* '}'
		public Group getGroup() { return cGroup; }
		
		//'parallel'
		public Keyword getParallelKeyword_0() { return cParallelKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//inputRobots+=[Robot|EString]
		public Assignment getInputRobotsAssignment_2() { return cInputRobotsAssignment_2; }
		
		//[Robot|EString]
		public CrossReference getInputRobotsRobotCrossReference_2_0() { return cInputRobotsRobotCrossReference_2_0; }
		
		//EString
		public RuleCall getInputRobotsRobotEStringParserRuleCall_2_0_1() { return cInputRobotsRobotEStringParserRuleCall_2_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//inputOperators+=Operator
		public Assignment getInputOperatorsAssignment_4() { return cInputOperatorsAssignment_4; }
		
		//Operator
		public RuleCall getInputOperatorsOperatorParserRuleCall_4_0() { return cInputOperatorsOperatorParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//("," inputRobots+=[Robot|EString] '(' inputOperators+=Operator ')')*
		public Group getGroup_6() { return cGroup_6; }
		
		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//inputRobots+=[Robot|EString]
		public Assignment getInputRobotsAssignment_6_1() { return cInputRobotsAssignment_6_1; }
		
		//[Robot|EString]
		public CrossReference getInputRobotsRobotCrossReference_6_1_0() { return cInputRobotsRobotCrossReference_6_1_0; }
		
		//EString
		public RuleCall getInputRobotsRobotEStringParserRuleCall_6_1_0_1() { return cInputRobotsRobotEStringParserRuleCall_6_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_2() { return cLeftParenthesisKeyword_6_2; }
		
		//inputOperators+=Operator
		public Assignment getInputOperatorsAssignment_6_3() { return cInputOperatorsAssignment_6_3; }
		
		//Operator
		public RuleCall getInputOperatorsOperatorParserRuleCall_6_3_0() { return cInputOperatorsOperatorParserRuleCall_6_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_4() { return cRightParenthesisKeyword_6_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class EventHandlerOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.EventHandlerOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventHandlerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDefaultKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInputOperatorsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInputOperatorsOperatorParserRuleCall_4_0 = (RuleCall)cInputOperatorsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cExceptKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInputEventsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cInputEventsEventAssignmentParserRuleCall_6_1_0 = (RuleCall)cInputEventsAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//EventHandlerOp:
		//	'eventHandler' '('
		//	'default' '(' inputOperators+=Operator ')' ('except' inputEvents+=EventAssignment)+
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'eventHandler' '(' 'default' '(' inputOperators+=Operator ')' ('except' inputEvents+=EventAssignment)+ ')'
		public Group getGroup() { return cGroup; }
		
		//'eventHandler'
		public Keyword getEventHandlerKeyword_0() { return cEventHandlerKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'default'
		public Keyword getDefaultKeyword_2() { return cDefaultKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//inputOperators+=Operator
		public Assignment getInputOperatorsAssignment_4() { return cInputOperatorsAssignment_4; }
		
		//Operator
		public RuleCall getInputOperatorsOperatorParserRuleCall_4_0() { return cInputOperatorsOperatorParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//('except' inputEvents+=EventAssignment)+
		public Group getGroup_6() { return cGroup_6; }
		
		//'except'
		public Keyword getExceptKeyword_6_0() { return cExceptKeyword_6_0; }
		
		//inputEvents+=EventAssignment
		public Assignment getInputEventsAssignment_6_1() { return cInputEventsAssignment_6_1; }
		
		//EventAssignment
		public RuleCall getInputEventsEventAssignmentParserRuleCall_6_1_0() { return cInputEventsEventAssignmentParserRuleCall_6_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ConditionOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.ConditionOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInputEventsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInputEventsEventAssignmentParserRuleCall_2_1_0 = (RuleCall)cInputEventsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ConditionOp:
		//	'condition' '(' ('if' inputEvents+=EventAssignment)+
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'condition' '(' ('if' inputEvents+=EventAssignment)+ ')'
		public Group getGroup() { return cGroup; }
		
		//'condition'
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//('if' inputEvents+=EventAssignment)+
		public Group getGroup_2() { return cGroup_2; }
		
		//'if'
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }
		
		//inputEvents+=EventAssignment
		public Assignment getInputEventsAssignment_2_1() { return cInputEventsAssignment_2_1; }
		
		//EventAssignment
		public RuleCall getInputEventsEventAssignmentParserRuleCall_2_1_0() { return cInputEventsEventAssignmentParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class DelegateOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.DelegateOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDelegateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPatternAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPatternPatternParserRuleCall_2_0 = (RuleCall)cPatternAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLocationsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInputLocationsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cInputLocationsLocationCrossReference_3_1_0 = (CrossReference)cInputLocationsAssignment_3_1.eContents().get(0);
		private final RuleCall cInputLocationsLocationEStringParserRuleCall_3_1_0_1 = (RuleCall)cInputLocationsLocationCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cInputLocationsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cInputLocationsLocationCrossReference_3_2_1_0 = (CrossReference)cInputLocationsAssignment_3_2_1.eContents().get(0);
		private final RuleCall cInputLocationsLocationEStringParserRuleCall_3_2_1_0_1 = (RuleCall)cInputLocationsLocationCrossReference_3_2_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cActionsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInputActionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cInputActionActionCrossReference_4_1_0 = (CrossReference)cInputActionAssignment_4_1.eContents().get(0);
		private final RuleCall cInputActionActionEStringParserRuleCall_4_1_0_1 = (RuleCall)cInputActionActionCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cInputActionAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cInputActionActionCrossReference_4_2_1_0 = (CrossReference)cInputActionAssignment_4_2_1.eContents().get(0);
		private final RuleCall cInputActionActionEStringParserRuleCall_4_2_1_0_1 = (RuleCall)cInputActionActionCrossReference_4_2_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cStoppingEventsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cStoppingEventAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cStoppingEventEventCrossReference_5_1_0 = (CrossReference)cStoppingEventAssignment_5_1.eContents().get(0);
		private final RuleCall cStoppingEventEventEStringParserRuleCall_5_1_0_1 = (RuleCall)cStoppingEventEventCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cStoppingEventAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final CrossReference cStoppingEventEventCrossReference_5_2_1_0 = (CrossReference)cStoppingEventAssignment_5_2_1.eContents().get(0);
		private final RuleCall cStoppingEventEventEStringParserRuleCall_5_2_1_0_1 = (RuleCall)cStoppingEventEventCrossReference_5_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DelegateOp:
		//	'delegate' '('
		//	pattern=Pattern ('locations' inputLocations+=[Location|EString] ("," inputLocations+=[Location|EString])*)? ('actions'
		//	inputAction+=[Action|EString] ("," inputAction+=[Action|EString])*)? ('stoppingEvents' stoppingEvent+=[Event|EString]
		//	("," stoppingEvent+=[Event|EString])*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'delegate' '(' pattern=Pattern ('locations' inputLocations+=[Location|EString] (","
		//inputLocations+=[Location|EString])*)? ('actions' inputAction+=[Action|EString] ("," inputAction+=[Action|EString])*)?
		//('stoppingEvents' stoppingEvent+=[Event|EString] ("," stoppingEvent+=[Event|EString])*)? ')'
		public Group getGroup() { return cGroup; }
		
		//'delegate'
		public Keyword getDelegateKeyword_0() { return cDelegateKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_2() { return cPatternAssignment_2; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_2_0() { return cPatternPatternParserRuleCall_2_0; }
		
		//('locations' inputLocations+=[Location|EString] ("," inputLocations+=[Location|EString])*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'locations'
		public Keyword getLocationsKeyword_3_0() { return cLocationsKeyword_3_0; }
		
		//inputLocations+=[Location|EString]
		public Assignment getInputLocationsAssignment_3_1() { return cInputLocationsAssignment_3_1; }
		
		//[Location|EString]
		public CrossReference getInputLocationsLocationCrossReference_3_1_0() { return cInputLocationsLocationCrossReference_3_1_0; }
		
		//EString
		public RuleCall getInputLocationsLocationEStringParserRuleCall_3_1_0_1() { return cInputLocationsLocationEStringParserRuleCall_3_1_0_1; }
		
		//("," inputLocations+=[Location|EString])*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//inputLocations+=[Location|EString]
		public Assignment getInputLocationsAssignment_3_2_1() { return cInputLocationsAssignment_3_2_1; }
		
		//[Location|EString]
		public CrossReference getInputLocationsLocationCrossReference_3_2_1_0() { return cInputLocationsLocationCrossReference_3_2_1_0; }
		
		//EString
		public RuleCall getInputLocationsLocationEStringParserRuleCall_3_2_1_0_1() { return cInputLocationsLocationEStringParserRuleCall_3_2_1_0_1; }
		
		//('actions' inputAction+=[Action|EString] ("," inputAction+=[Action|EString])*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'actions'
		public Keyword getActionsKeyword_4_0() { return cActionsKeyword_4_0; }
		
		//inputAction+=[Action|EString]
		public Assignment getInputActionAssignment_4_1() { return cInputActionAssignment_4_1; }
		
		//[Action|EString]
		public CrossReference getInputActionActionCrossReference_4_1_0() { return cInputActionActionCrossReference_4_1_0; }
		
		//EString
		public RuleCall getInputActionActionEStringParserRuleCall_4_1_0_1() { return cInputActionActionEStringParserRuleCall_4_1_0_1; }
		
		//("," inputAction+=[Action|EString])*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//inputAction+=[Action|EString]
		public Assignment getInputActionAssignment_4_2_1() { return cInputActionAssignment_4_2_1; }
		
		//[Action|EString]
		public CrossReference getInputActionActionCrossReference_4_2_1_0() { return cInputActionActionCrossReference_4_2_1_0; }
		
		//EString
		public RuleCall getInputActionActionEStringParserRuleCall_4_2_1_0_1() { return cInputActionActionEStringParserRuleCall_4_2_1_0_1; }
		
		//('stoppingEvents' stoppingEvent+=[Event|EString] ("," stoppingEvent+=[Event|EString])*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'stoppingEvents'
		public Keyword getStoppingEventsKeyword_5_0() { return cStoppingEventsKeyword_5_0; }
		
		//stoppingEvent+=[Event|EString]
		public Assignment getStoppingEventAssignment_5_1() { return cStoppingEventAssignment_5_1; }
		
		//[Event|EString]
		public CrossReference getStoppingEventEventCrossReference_5_1_0() { return cStoppingEventEventCrossReference_5_1_0; }
		
		//EString
		public RuleCall getStoppingEventEventEStringParserRuleCall_5_1_0_1() { return cStoppingEventEventEStringParserRuleCall_5_1_0_1; }
		
		//("," stoppingEvent+=[Event|EString])*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//stoppingEvent+=[Event|EString]
		public Assignment getStoppingEventAssignment_5_2_1() { return cStoppingEventAssignment_5_2_1; }
		
		//[Event|EString]
		public CrossReference getStoppingEventEventCrossReference_5_2_1_0() { return cStoppingEventEventCrossReference_5_2_1_0; }
		
		//EString
		public RuleCall getStoppingEventEventEStringParserRuleCall_5_2_1_0_1() { return cStoppingEventEventEStringParserRuleCall_5_2_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class ANDOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.ANDOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInputOperatorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInputOperatorsOperatorParserRuleCall_2_0 = (RuleCall)cInputOperatorsAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cAmpersandKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cANDKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Keyword cAndKeyword_3_2 = (Keyword)cAlternatives_3.eContents().get(2);
		private final Assignment cInputOperatorsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInputOperatorsOperatorParserRuleCall_4_0 = (RuleCall)cInputOperatorsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ANDOp:
		//	'and' '('
		//	inputOperators+=Operator ('&' | 'AND' | 'and') inputOperators+=Operator
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'and' '(' inputOperators+=Operator ('&' | 'AND' | 'and') inputOperators+=Operator ')'
		public Group getGroup() { return cGroup; }
		
		//'and'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//inputOperators+=Operator
		public Assignment getInputOperatorsAssignment_2() { return cInputOperatorsAssignment_2; }
		
		//Operator
		public RuleCall getInputOperatorsOperatorParserRuleCall_2_0() { return cInputOperatorsOperatorParserRuleCall_2_0; }
		
		//'&' | 'AND' | 'and'
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'&'
		public Keyword getAmpersandKeyword_3_0() { return cAmpersandKeyword_3_0; }
		
		//'AND'
		public Keyword getANDKeyword_3_1() { return cANDKeyword_3_1; }
		
		//'and'
		public Keyword getAndKeyword_3_2() { return cAndKeyword_3_2; }
		
		//inputOperators+=Operator
		public Assignment getInputOperatorsAssignment_4() { return cInputOperatorsAssignment_4; }
		
		//Operator
		public RuleCall getInputOperatorsOperatorParserRuleCall_4_0() { return cInputOperatorsOperatorParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class OROpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.OROp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInputOperatorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInputOperatorsOperatorParserRuleCall_2_0 = (RuleCall)cInputOperatorsAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cVerticalLineKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cORKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Keyword cOrKeyword_3_2 = (Keyword)cAlternatives_3.eContents().get(2);
		private final Assignment cInputOperatorsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInputOperatorsOperatorParserRuleCall_4_0 = (RuleCall)cInputOperatorsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//OROp:
		//	'or' '('
		//	inputOperators+=Operator ('|' | 'OR' | 'or') inputOperators+=Operator
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'or' '(' inputOperators+=Operator ('|' | 'OR' | 'or') inputOperators+=Operator ')'
		public Group getGroup() { return cGroup; }
		
		//'or'
		public Keyword getOrKeyword_0() { return cOrKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//inputOperators+=Operator
		public Assignment getInputOperatorsAssignment_2() { return cInputOperatorsAssignment_2; }
		
		//Operator
		public RuleCall getInputOperatorsOperatorParserRuleCall_2_0() { return cInputOperatorsOperatorParserRuleCall_2_0; }
		
		//'|' | 'OR' | 'or'
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'|'
		public Keyword getVerticalLineKeyword_3_0() { return cVerticalLineKeyword_3_0; }
		
		//'OR'
		public Keyword getORKeyword_3_1() { return cORKeyword_3_1; }
		
		//'or'
		public Keyword getOrKeyword_3_2() { return cOrKeyword_3_2; }
		
		//inputOperators+=Operator
		public Assignment getInputOperatorsAssignment_4() { return cInputOperatorsAssignment_4; }
		
		//Operator
		public RuleCall getInputOperatorsOperatorParserRuleCall_4_0() { return cInputOperatorsOperatorParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class EventAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.EventAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInputEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cInputEventEventCrossReference_0_0 = (CrossReference)cInputEventAssignment_0.eContents().get(0);
		private final RuleCall cInputEventEventEStringParserRuleCall_0_0_1 = (RuleCall)cInputEventEventCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInputOperatorsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInputOperatorsOperatorParserRuleCall_2_0 = (RuleCall)cInputOperatorsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/////////////Others
		//EventAssignment:
		//	inputEvent=[Event|EString] '(' inputOperators=Operator ')';
		@Override public ParserRule getRule() { return rule; }
		
		//inputEvent=[Event|EString] '(' inputOperators=Operator ')'
		public Group getGroup() { return cGroup; }
		
		//inputEvent=[Event|EString]
		public Assignment getInputEventAssignment_0() { return cInputEventAssignment_0; }
		
		//[Event|EString]
		public CrossReference getInputEventEventCrossReference_0_0() { return cInputEventEventCrossReference_0_0; }
		
		//EString
		public RuleCall getInputEventEventEStringParserRuleCall_0_0_1() { return cInputEventEventEStringParserRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//inputOperators=Operator
		public Assignment getInputOperatorsAssignment_2() { return cInputOperatorsAssignment_2; }
		
		//Operator
		public RuleCall getInputOperatorsOperatorParserRuleCall_2_0() { return cInputOperatorsOperatorParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SimpleActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.SimpleAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSimpleActionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		///////////////////////////////////////// Patterns
		//SimpleAction:
		//	{SimpleAction}
		//	'SimpleAction';
		@Override public ParserRule getRule() { return rule; }
		
		//{SimpleAction} 'SimpleAction'
		public Group getGroup() { return cGroup; }
		
		//{SimpleAction}
		public Action getSimpleActionAction_0() { return cSimpleActionAction_0; }
		
		//'SimpleAction'
		public Keyword getSimpleActionKeyword_1() { return cSimpleActionKeyword_1; }
	}
	public class VisitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.Visit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVisitAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVisitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//////////////// Movement Patterns
		//Visit:
		//	{Visit}
		//	'Visit';
		@Override public ParserRule getRule() { return rule; }
		
		//{Visit} 'Visit'
		public Group getGroup() { return cGroup; }
		
		//{Visit}
		public Action getVisitAction_0() { return cVisitAction_0; }
		
		//'Visit'
		public Keyword getVisitKeyword_1() { return cVisitKeyword_1; }
	}
	public class SequencedVisitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.SequencedVisit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSequencedVisitAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSequencedVisitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SequencedVisit:
		//	{SequencedVisit}
		//	'SequencedVisit';
		@Override public ParserRule getRule() { return rule; }
		
		//{SequencedVisit} 'SequencedVisit'
		public Group getGroup() { return cGroup; }
		
		//{SequencedVisit}
		public Action getSequencedVisitAction_0() { return cSequencedVisitAction_0; }
		
		//'SequencedVisit'
		public Keyword getSequencedVisitKeyword_1() { return cSequencedVisitKeyword_1; }
	}
	public class OrderderVisitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.OrderderVisit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOrderderVisitAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOrderedVisitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//OrderderVisit:
		//	{OrderderVisit}
		//	'OrderedVisit';
		@Override public ParserRule getRule() { return rule; }
		
		//{OrderderVisit} 'OrderedVisit'
		public Group getGroup() { return cGroup; }
		
		//{OrderderVisit}
		public Action getOrderderVisitAction_0() { return cOrderderVisitAction_0; }
		
		//'OrderedVisit'
		public Keyword getOrderedVisitKeyword_1() { return cOrderedVisitKeyword_1; }
	}
	public class StrictOrderedVisitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.StrictOrderedVisit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStrictOrderedVisitAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStrictOrderedVisitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StrictOrderedVisit:
		//	{StrictOrderedVisit}
		//	'StrictOrderedVisit';
		@Override public ParserRule getRule() { return rule; }
		
		//{StrictOrderedVisit} 'StrictOrderedVisit'
		public Group getGroup() { return cGroup; }
		
		//{StrictOrderedVisit}
		public Action getStrictOrderedVisitAction_0() { return cStrictOrderedVisitAction_0; }
		
		//'StrictOrderedVisit'
		public Keyword getStrictOrderedVisitKeyword_1() { return cStrictOrderedVisitKeyword_1; }
	}
	public class FairVisitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.FairVisit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFairVisitAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFairVisitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FairVisit:
		//	{FairVisit}
		//	'FairVisit';
		@Override public ParserRule getRule() { return rule; }
		
		//{FairVisit} 'FairVisit'
		public Group getGroup() { return cGroup; }
		
		//{FairVisit}
		public Action getFairVisitAction_0() { return cFairVisitAction_0; }
		
		//'FairVisit'
		public Keyword getFairVisitKeyword_1() { return cFairVisitKeyword_1; }
	}
	public class PatrollingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.Patrolling");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPatrollingAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPatrollingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Patrolling:
		//	{Patrolling}
		//	'Patrolling';
		@Override public ParserRule getRule() { return rule; }
		
		//{Patrolling} 'Patrolling'
		public Group getGroup() { return cGroup; }
		
		//{Patrolling}
		public Action getPatrollingAction_0() { return cPatrollingAction_0; }
		
		//'Patrolling'
		public Keyword getPatrollingKeyword_1() { return cPatrollingKeyword_1; }
	}
	public class SequencedPatrollingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.SequencedPatrolling");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSequencedPatrollingAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSequencedPatrollingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SequencedPatrolling:
		//	{SequencedPatrolling}
		//	'SequencedPatrolling';
		@Override public ParserRule getRule() { return rule; }
		
		//{SequencedPatrolling} 'SequencedPatrolling'
		public Group getGroup() { return cGroup; }
		
		//{SequencedPatrolling}
		public Action getSequencedPatrollingAction_0() { return cSequencedPatrollingAction_0; }
		
		//'SequencedPatrolling'
		public Keyword getSequencedPatrollingKeyword_1() { return cSequencedPatrollingKeyword_1; }
	}
	public class OrderedPatrollingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.OrderedPatrolling");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOrderedPatrollingAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOrderedPatrollingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//OrderedPatrolling:
		//	{OrderedPatrolling}
		//	'OrderedPatrolling';
		@Override public ParserRule getRule() { return rule; }
		
		//{OrderedPatrolling} 'OrderedPatrolling'
		public Group getGroup() { return cGroup; }
		
		//{OrderedPatrolling}
		public Action getOrderedPatrollingAction_0() { return cOrderedPatrollingAction_0; }
		
		//'OrderedPatrolling'
		public Keyword getOrderedPatrollingKeyword_1() { return cOrderedPatrollingKeyword_1; }
	}
	public class StrictOreredPatrollingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.StrictOreredPatrolling");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStrictOreredPatrollingAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStrictOrderedPatrollingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StrictOreredPatrolling:
		//	{StrictOreredPatrolling}
		//	'StrictOrderedPatrolling';
		@Override public ParserRule getRule() { return rule; }
		
		//{StrictOreredPatrolling} 'StrictOrderedPatrolling'
		public Group getGroup() { return cGroup; }
		
		//{StrictOreredPatrolling}
		public Action getStrictOreredPatrollingAction_0() { return cStrictOreredPatrollingAction_0; }
		
		//'StrictOrderedPatrolling'
		public Keyword getStrictOrderedPatrollingKeyword_1() { return cStrictOrderedPatrollingKeyword_1; }
	}
	public class FairPatrollingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.FairPatrolling");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFairPatrollingAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFairPatrollingKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FairPatrolling:
		//	{FairPatrolling}
		//	'FairPatrolling';
		@Override public ParserRule getRule() { return rule; }
		
		//{FairPatrolling} 'FairPatrolling'
		public Group getGroup() { return cGroup; }
		
		//{FairPatrolling}
		public Action getFairPatrollingAction_0() { return cFairPatrollingAction_0; }
		
		//'FairPatrolling'
		public Keyword getFairPatrollingKeyword_1() { return cFairPatrollingKeyword_1; }
	}
	public class UpperRestrictedAvoidanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.UpperRestrictedAvoidance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUpperRestrictedAvoidanceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUpperRestrictedAvoidanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//////////////// Avoidance Patterns
		//UpperRestrictedAvoidance:
		//	{UpperRestrictedAvoidance}
		//	'UpperRestrictedAvoidance';
		@Override public ParserRule getRule() { return rule; }
		
		//{UpperRestrictedAvoidance} 'UpperRestrictedAvoidance'
		public Group getGroup() { return cGroup; }
		
		//{UpperRestrictedAvoidance}
		public Action getUpperRestrictedAvoidanceAction_0() { return cUpperRestrictedAvoidanceAction_0; }
		
		//'UpperRestrictedAvoidance'
		public Keyword getUpperRestrictedAvoidanceKeyword_1() { return cUpperRestrictedAvoidanceKeyword_1; }
	}
	public class ExactRestrictedAvoidanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.ExactRestrictedAvoidance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExactRestrictedAvoidanceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExactRestrictedAvoidanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ExactRestrictedAvoidance:
		//	{ExactRestrictedAvoidance}
		//	'ExactRestrictedAvoidance';
		@Override public ParserRule getRule() { return rule; }
		
		//{ExactRestrictedAvoidance} 'ExactRestrictedAvoidance'
		public Group getGroup() { return cGroup; }
		
		//{ExactRestrictedAvoidance}
		public Action getExactRestrictedAvoidanceAction_0() { return cExactRestrictedAvoidanceAction_0; }
		
		//'ExactRestrictedAvoidance'
		public Keyword getExactRestrictedAvoidanceKeyword_1() { return cExactRestrictedAvoidanceKeyword_1; }
	}
	public class LowerRestrictedAvoidanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.LowerRestrictedAvoidance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLowerRestrictedAvoidanceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLowerRestrictedAvoidanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LowerRestrictedAvoidance:
		//	{LowerRestrictedAvoidance}
		//	'LowerRestrictedAvoidance';
		@Override public ParserRule getRule() { return rule; }
		
		//{LowerRestrictedAvoidance} 'LowerRestrictedAvoidance'
		public Group getGroup() { return cGroup; }
		
		//{LowerRestrictedAvoidance}
		public Action getLowerRestrictedAvoidanceAction_0() { return cLowerRestrictedAvoidanceAction_0; }
		
		//'LowerRestrictedAvoidance'
		public Keyword getLowerRestrictedAvoidanceKeyword_1() { return cLowerRestrictedAvoidanceKeyword_1; }
	}
	public class FutureAvoidanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.FutureAvoidance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFutureAvoidanceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFutureAvoidanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FutureAvoidance:
		//	{FutureAvoidance}
		//	'FutureAvoidance';
		@Override public ParserRule getRule() { return rule; }
		
		//{FutureAvoidance} 'FutureAvoidance'
		public Group getGroup() { return cGroup; }
		
		//{FutureAvoidance}
		public Action getFutureAvoidanceAction_0() { return cFutureAvoidanceAction_0; }
		
		//'FutureAvoidance'
		public Keyword getFutureAvoidanceKeyword_1() { return cFutureAvoidanceKeyword_1; }
	}
	public class GlobalAvoidanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.GlobalAvoidance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGlobalAvoidanceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGlobalAvoidanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//GlobalAvoidance:
		//	{GlobalAvoidance}
		//	'GlobalAvoidance';
		@Override public ParserRule getRule() { return rule; }
		
		//{GlobalAvoidance} 'GlobalAvoidance'
		public Group getGroup() { return cGroup; }
		
		//{GlobalAvoidance}
		public Action getGlobalAvoidanceAction_0() { return cGlobalAvoidanceAction_0; }
		
		//'GlobalAvoidance'
		public Keyword getGlobalAvoidanceKeyword_1() { return cGlobalAvoidanceKeyword_1; }
	}
	public class PastAvoidanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.PastAvoidance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPastAvoidanceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPastAvoidanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PastAvoidance:
		//	{PastAvoidance}
		//	'PastAvoidance';
		@Override public ParserRule getRule() { return rule; }
		
		//{PastAvoidance} 'PastAvoidance'
		public Group getGroup() { return cGroup; }
		
		//{PastAvoidance}
		public Action getPastAvoidanceAction_0() { return cPastAvoidanceAction_0; }
		
		//'PastAvoidance'
		public Keyword getPastAvoidanceKeyword_1() { return cPastAvoidanceKeyword_1; }
	}
	public class WaitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.Wait");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWaitAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWaitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//////////////// Trigger Patterns
		//Wait:
		//	{Wait}
		//	'Wait';
		@Override public ParserRule getRule() { return rule; }
		
		//{Wait} 'Wait'
		public Group getGroup() { return cGroup; }
		
		//{Wait}
		public Action getWaitAction_0() { return cWaitAction_0; }
		
		//'Wait'
		public Keyword getWaitKeyword_1() { return cWaitKeyword_1; }
	}
	public class DelayedReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.DelayedReaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDelayedReactionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDelayedReactionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DelayedReaction:
		//	{DelayedReaction}
		//	'DelayedReaction';
		@Override public ParserRule getRule() { return rule; }
		
		//{DelayedReaction} 'DelayedReaction'
		public Group getGroup() { return cGroup; }
		
		//{DelayedReaction}
		public Action getDelayedReactionAction_0() { return cDelayedReactionAction_0; }
		
		//'DelayedReaction'
		public Keyword getDelayedReactionKeyword_1() { return cDelayedReactionKeyword_1; }
	}
	public class InstantReactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.InstantReaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInstantReactionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInstantReactionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InstantReaction:
		//	{InstantReaction}
		//	'InstantReaction';
		@Override public ParserRule getRule() { return rule; }
		
		//{InstantReaction} 'InstantReaction'
		public Group getGroup() { return cGroup; }
		
		//{InstantReaction}
		public Action getInstantReactionAction_0() { return cInstantReactionAction_0; }
		
		//'InstantReaction'
		public Keyword getInstantReactionKeyword_1() { return cInstantReactionKeyword_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "se.gu.co4robots.xtext.promise.Promise.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private final MissionElements pMission;
	private final OperatorElements pOperator;
	private final PatternElements pPattern;
	private final RobotElements pRobot;
	private final LocationElements pLocation;
	private final EventElements pEvent;
	private final ActionElements pAction;
	private final FallBackOpElements pFallBackOp;
	private final SequenceOpElements pSequenceOp;
	private final ParallelOpElements pParallelOp;
	private final EventHandlerOpElements pEventHandlerOp;
	private final ConditionOpElements pConditionOp;
	private final DelegateOpElements pDelegateOp;
	private final ANDOpElements pANDOp;
	private final OROpElements pOROp;
	private final EventAssignmentElements pEventAssignment;
	private final SimpleActionElements pSimpleAction;
	private final VisitElements pVisit;
	private final SequencedVisitElements pSequencedVisit;
	private final OrderderVisitElements pOrderderVisit;
	private final StrictOrderedVisitElements pStrictOrderedVisit;
	private final FairVisitElements pFairVisit;
	private final PatrollingElements pPatrolling;
	private final SequencedPatrollingElements pSequencedPatrolling;
	private final OrderedPatrollingElements pOrderedPatrolling;
	private final StrictOreredPatrollingElements pStrictOreredPatrolling;
	private final FairPatrollingElements pFairPatrolling;
	private final UpperRestrictedAvoidanceElements pUpperRestrictedAvoidance;
	private final ExactRestrictedAvoidanceElements pExactRestrictedAvoidance;
	private final LowerRestrictedAvoidanceElements pLowerRestrictedAvoidance;
	private final FutureAvoidanceElements pFutureAvoidance;
	private final GlobalAvoidanceElements pGlobalAvoidance;
	private final PastAvoidanceElements pPastAvoidance;
	private final WaitElements pWait;
	private final DelayedReactionElements pDelayedReaction;
	private final InstantReactionElements pInstantReaction;
	private final EStringElements pEString;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PromiseGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMission = new MissionElements();
		this.pOperator = new OperatorElements();
		this.pPattern = new PatternElements();
		this.pRobot = new RobotElements();
		this.pLocation = new LocationElements();
		this.pEvent = new EventElements();
		this.pAction = new ActionElements();
		this.pFallBackOp = new FallBackOpElements();
		this.pSequenceOp = new SequenceOpElements();
		this.pParallelOp = new ParallelOpElements();
		this.pEventHandlerOp = new EventHandlerOpElements();
		this.pConditionOp = new ConditionOpElements();
		this.pDelegateOp = new DelegateOpElements();
		this.pANDOp = new ANDOpElements();
		this.pOROp = new OROpElements();
		this.pEventAssignment = new EventAssignmentElements();
		this.pSimpleAction = new SimpleActionElements();
		this.pVisit = new VisitElements();
		this.pSequencedVisit = new SequencedVisitElements();
		this.pOrderderVisit = new OrderderVisitElements();
		this.pStrictOrderedVisit = new StrictOrderedVisitElements();
		this.pFairVisit = new FairVisitElements();
		this.pPatrolling = new PatrollingElements();
		this.pSequencedPatrolling = new SequencedPatrollingElements();
		this.pOrderedPatrolling = new OrderedPatrollingElements();
		this.pStrictOreredPatrolling = new StrictOreredPatrollingElements();
		this.pFairPatrolling = new FairPatrollingElements();
		this.pUpperRestrictedAvoidance = new UpperRestrictedAvoidanceElements();
		this.pExactRestrictedAvoidance = new ExactRestrictedAvoidanceElements();
		this.pLowerRestrictedAvoidance = new LowerRestrictedAvoidanceElements();
		this.pFutureAvoidance = new FutureAvoidanceElements();
		this.pGlobalAvoidance = new GlobalAvoidanceElements();
		this.pPastAvoidance = new PastAvoidanceElements();
		this.pWait = new WaitElements();
		this.pDelayedReaction = new DelayedReactionElements();
		this.pInstantReaction = new InstantReactionElements();
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("se.gu.co4robots.xtext.promise.Promise".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Mission:
	//	'mission'
	//	'{' ('conditions' '{' ('events' events+=Event ("," events+=Event)*)? ('actions' actions+=Action (","
	//	actions+=Action)*)? '}')?
	//	'robots' robots+=Robot ("," robots+=Robot)* ('locations' locations+=Location ("," locations+=Location)*)?
	//	'operators' '{' operator+=Operator ("," operator+=Operator)* '}'
	//	'}';
	public MissionElements getMissionAccess() {
		return pMission;
	}
	
	public ParserRule getMissionRule() {
		return getMissionAccess().getRule();
	}
	
	//Operator:
	//	FallBackOp | SequenceOp | ParallelOp | EventHandlerOp | ConditionOp | DelegateOp | ANDOp | OROp;
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//Pattern:
	//	SimpleAction | Visit | SequencedVisit | OrderderVisit | StrictOrderedVisit | FairVisit | Patrolling |
	//	SequencedPatrolling | OrderedPatrolling | StrictOreredPatrolling | FairPatrolling | UpperRestrictedAvoidance |
	//	ExactRestrictedAvoidance | LowerRestrictedAvoidance | FutureAvoidance | GlobalAvoidance | PastAvoidance | Wait |
	//	DelayedReaction | InstantReaction;
	public PatternElements getPatternAccess() {
		return pPattern;
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}
	
	//Robot:
	//	name=EString;
	public RobotElements getRobotAccess() {
		return pRobot;
	}
	
	public ParserRule getRobotRule() {
		return getRobotAccess().getRule();
	}
	
	///////////////////////////////////////// Locations
	//Location:
	//	name=EString;
	public LocationElements getLocationAccess() {
		return pLocation;
	}
	
	public ParserRule getLocationRule() {
		return getLocationAccess().getRule();
	}
	
	///////////////////////////////////////// Conditions
	//Event:
	//	name=ID ':' description=EString;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//Action:
	//	name=ID ':' description=EString;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	///////////////////////////////////////// Operators
	//FallBackOp:
	//	'fallback' '(' inputOperators+=Operator ("," inputOperators+=Operator)*
	//	')';
	public FallBackOpElements getFallBackOpAccess() {
		return pFallBackOp;
	}
	
	public ParserRule getFallBackOpRule() {
		return getFallBackOpAccess().getRule();
	}
	
	//SequenceOp:
	//	'sequence' '(' inputOperators+=Operator ("," inputOperators+=Operator)*
	//	')';
	public SequenceOpElements getSequenceOpAccess() {
		return pSequenceOp;
	}
	
	public ParserRule getSequenceOpRule() {
		return getSequenceOpAccess().getRule();
	}
	
	//ParallelOp:
	//	'parallel' '{' inputRobots+=[Robot|EString] '(' inputOperators+=Operator ')' ("," inputRobots+=[Robot|EString] '('
	//	inputOperators+=Operator ')')* '}';
	public ParallelOpElements getParallelOpAccess() {
		return pParallelOp;
	}
	
	public ParserRule getParallelOpRule() {
		return getParallelOpAccess().getRule();
	}
	
	//EventHandlerOp:
	//	'eventHandler' '('
	//	'default' '(' inputOperators+=Operator ')' ('except' inputEvents+=EventAssignment)+
	//	')';
	public EventHandlerOpElements getEventHandlerOpAccess() {
		return pEventHandlerOp;
	}
	
	public ParserRule getEventHandlerOpRule() {
		return getEventHandlerOpAccess().getRule();
	}
	
	//ConditionOp:
	//	'condition' '(' ('if' inputEvents+=EventAssignment)+
	//	')';
	public ConditionOpElements getConditionOpAccess() {
		return pConditionOp;
	}
	
	public ParserRule getConditionOpRule() {
		return getConditionOpAccess().getRule();
	}
	
	//DelegateOp:
	//	'delegate' '('
	//	pattern=Pattern ('locations' inputLocations+=[Location|EString] ("," inputLocations+=[Location|EString])*)? ('actions'
	//	inputAction+=[Action|EString] ("," inputAction+=[Action|EString])*)? ('stoppingEvents' stoppingEvent+=[Event|EString]
	//	("," stoppingEvent+=[Event|EString])*)? ')';
	public DelegateOpElements getDelegateOpAccess() {
		return pDelegateOp;
	}
	
	public ParserRule getDelegateOpRule() {
		return getDelegateOpAccess().getRule();
	}
	
	//ANDOp:
	//	'and' '('
	//	inputOperators+=Operator ('&' | 'AND' | 'and') inputOperators+=Operator
	//	')';
	public ANDOpElements getANDOpAccess() {
		return pANDOp;
	}
	
	public ParserRule getANDOpRule() {
		return getANDOpAccess().getRule();
	}
	
	//OROp:
	//	'or' '('
	//	inputOperators+=Operator ('|' | 'OR' | 'or') inputOperators+=Operator
	//	')';
	public OROpElements getOROpAccess() {
		return pOROp;
	}
	
	public ParserRule getOROpRule() {
		return getOROpAccess().getRule();
	}
	
	/////////////Others
	//EventAssignment:
	//	inputEvent=[Event|EString] '(' inputOperators=Operator ')';
	public EventAssignmentElements getEventAssignmentAccess() {
		return pEventAssignment;
	}
	
	public ParserRule getEventAssignmentRule() {
		return getEventAssignmentAccess().getRule();
	}
	
	///////////////////////////////////////// Patterns
	//SimpleAction:
	//	{SimpleAction}
	//	'SimpleAction';
	public SimpleActionElements getSimpleActionAccess() {
		return pSimpleAction;
	}
	
	public ParserRule getSimpleActionRule() {
		return getSimpleActionAccess().getRule();
	}
	
	//////////////// Movement Patterns
	//Visit:
	//	{Visit}
	//	'Visit';
	public VisitElements getVisitAccess() {
		return pVisit;
	}
	
	public ParserRule getVisitRule() {
		return getVisitAccess().getRule();
	}
	
	//SequencedVisit:
	//	{SequencedVisit}
	//	'SequencedVisit';
	public SequencedVisitElements getSequencedVisitAccess() {
		return pSequencedVisit;
	}
	
	public ParserRule getSequencedVisitRule() {
		return getSequencedVisitAccess().getRule();
	}
	
	//OrderderVisit:
	//	{OrderderVisit}
	//	'OrderedVisit';
	public OrderderVisitElements getOrderderVisitAccess() {
		return pOrderderVisit;
	}
	
	public ParserRule getOrderderVisitRule() {
		return getOrderderVisitAccess().getRule();
	}
	
	//StrictOrderedVisit:
	//	{StrictOrderedVisit}
	//	'StrictOrderedVisit';
	public StrictOrderedVisitElements getStrictOrderedVisitAccess() {
		return pStrictOrderedVisit;
	}
	
	public ParserRule getStrictOrderedVisitRule() {
		return getStrictOrderedVisitAccess().getRule();
	}
	
	//FairVisit:
	//	{FairVisit}
	//	'FairVisit';
	public FairVisitElements getFairVisitAccess() {
		return pFairVisit;
	}
	
	public ParserRule getFairVisitRule() {
		return getFairVisitAccess().getRule();
	}
	
	//Patrolling:
	//	{Patrolling}
	//	'Patrolling';
	public PatrollingElements getPatrollingAccess() {
		return pPatrolling;
	}
	
	public ParserRule getPatrollingRule() {
		return getPatrollingAccess().getRule();
	}
	
	//SequencedPatrolling:
	//	{SequencedPatrolling}
	//	'SequencedPatrolling';
	public SequencedPatrollingElements getSequencedPatrollingAccess() {
		return pSequencedPatrolling;
	}
	
	public ParserRule getSequencedPatrollingRule() {
		return getSequencedPatrollingAccess().getRule();
	}
	
	//OrderedPatrolling:
	//	{OrderedPatrolling}
	//	'OrderedPatrolling';
	public OrderedPatrollingElements getOrderedPatrollingAccess() {
		return pOrderedPatrolling;
	}
	
	public ParserRule getOrderedPatrollingRule() {
		return getOrderedPatrollingAccess().getRule();
	}
	
	//StrictOreredPatrolling:
	//	{StrictOreredPatrolling}
	//	'StrictOrderedPatrolling';
	public StrictOreredPatrollingElements getStrictOreredPatrollingAccess() {
		return pStrictOreredPatrolling;
	}
	
	public ParserRule getStrictOreredPatrollingRule() {
		return getStrictOreredPatrollingAccess().getRule();
	}
	
	//FairPatrolling:
	//	{FairPatrolling}
	//	'FairPatrolling';
	public FairPatrollingElements getFairPatrollingAccess() {
		return pFairPatrolling;
	}
	
	public ParserRule getFairPatrollingRule() {
		return getFairPatrollingAccess().getRule();
	}
	
	//////////////// Avoidance Patterns
	//UpperRestrictedAvoidance:
	//	{UpperRestrictedAvoidance}
	//	'UpperRestrictedAvoidance';
	public UpperRestrictedAvoidanceElements getUpperRestrictedAvoidanceAccess() {
		return pUpperRestrictedAvoidance;
	}
	
	public ParserRule getUpperRestrictedAvoidanceRule() {
		return getUpperRestrictedAvoidanceAccess().getRule();
	}
	
	//ExactRestrictedAvoidance:
	//	{ExactRestrictedAvoidance}
	//	'ExactRestrictedAvoidance';
	public ExactRestrictedAvoidanceElements getExactRestrictedAvoidanceAccess() {
		return pExactRestrictedAvoidance;
	}
	
	public ParserRule getExactRestrictedAvoidanceRule() {
		return getExactRestrictedAvoidanceAccess().getRule();
	}
	
	//LowerRestrictedAvoidance:
	//	{LowerRestrictedAvoidance}
	//	'LowerRestrictedAvoidance';
	public LowerRestrictedAvoidanceElements getLowerRestrictedAvoidanceAccess() {
		return pLowerRestrictedAvoidance;
	}
	
	public ParserRule getLowerRestrictedAvoidanceRule() {
		return getLowerRestrictedAvoidanceAccess().getRule();
	}
	
	//FutureAvoidance:
	//	{FutureAvoidance}
	//	'FutureAvoidance';
	public FutureAvoidanceElements getFutureAvoidanceAccess() {
		return pFutureAvoidance;
	}
	
	public ParserRule getFutureAvoidanceRule() {
		return getFutureAvoidanceAccess().getRule();
	}
	
	//GlobalAvoidance:
	//	{GlobalAvoidance}
	//	'GlobalAvoidance';
	public GlobalAvoidanceElements getGlobalAvoidanceAccess() {
		return pGlobalAvoidance;
	}
	
	public ParserRule getGlobalAvoidanceRule() {
		return getGlobalAvoidanceAccess().getRule();
	}
	
	//PastAvoidance:
	//	{PastAvoidance}
	//	'PastAvoidance';
	public PastAvoidanceElements getPastAvoidanceAccess() {
		return pPastAvoidance;
	}
	
	public ParserRule getPastAvoidanceRule() {
		return getPastAvoidanceAccess().getRule();
	}
	
	//////////////// Trigger Patterns
	//Wait:
	//	{Wait}
	//	'Wait';
	public WaitElements getWaitAccess() {
		return pWait;
	}
	
	public ParserRule getWaitRule() {
		return getWaitAccess().getRule();
	}
	
	//DelayedReaction:
	//	{DelayedReaction}
	//	'DelayedReaction';
	public DelayedReactionElements getDelayedReactionAccess() {
		return pDelayedReaction;
	}
	
	public ParserRule getDelayedReactionRule() {
		return getDelayedReactionAccess().getRule();
	}
	
	//InstantReaction:
	//	{InstantReaction}
	//	'InstantReaction';
	public InstantReactionElements getInstantReactionAccess() {
		return pInstantReaction;
	}
	
	public ParserRule getInstantReactionRule() {
		return getInstantReactionAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
