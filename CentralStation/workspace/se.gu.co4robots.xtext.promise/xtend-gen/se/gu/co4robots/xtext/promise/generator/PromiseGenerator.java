/**
 * generated by Xtext 2.12.0
 */
package se.gu.co4robots.xtext.promise.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import java.util.ArrayList;
import java.util.Arrays;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.ExclusiveRange;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import promise.CompositionOperator;
import promise.Condition;
import promise.ConditionOp;
import promise.DelegateOp;
import promise.EventHandlerOp;
import promise.FallBackOp;
import promise.Operator;
import promise.ParallelOp;
import promise.Robot;
import promise.SequenceOp;
import promise.impl.ActionImpl;
import promise.impl.EventImpl;
import se.gu.co4robots.xtext.promise.generator.robotClass;

@SuppressWarnings("all")
public class PromiseGenerator extends AbstractGenerator {
  private ArrayList<ArrayList<robotClass>> robotsList = new ArrayList<ArrayList<robotClass>>();
  
  private ArrayList<String> availableRobots = new ArrayList<String>();
  
  private ArrayList<String> stoppingEvents = new ArrayList<String>();
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    int _length = ((Object[])Conversions.unwrapArray(IteratorExtensions.<Robot>toIterable(Iterators.<Robot>filter(resource.getAllContents(), Robot.class)), Object.class)).length;
    ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _length, true);
    for (final Integer i : _doubleDotLessThan) {
      {
        this.availableRobots.add(((Robot[])Conversions.unwrapArray(IteratorExtensions.<Robot>toIterable(Iterators.<Robot>filter(resource.getAllContents(), Robot.class)), Robot.class))[(i).intValue()].getName());
        ArrayList<robotClass> _arrayList = new ArrayList<robotClass>();
        this.robotsList.add(_arrayList);
      }
    }
    ArrayList<robotClass> _get = this.robotsList.get(0);
    String _name = ((Robot[])Conversions.unwrapArray(IteratorExtensions.<Robot>toIterable(Iterators.<Robot>filter(resource.getAllContents(), Robot.class)), Robot.class))[0].getName();
    ArrayList<String> _arrayList = new ArrayList<String>();
    robotClass _robotClass = new robotClass(_name, _arrayList, 0);
    _get.add(_robotClass);
    this.doLogic(((Operator[])Conversions.unwrapArray(IteratorExtensions.<Operator>toIterable(Iterators.<Operator>filter(resource.getAllContents(), Operator.class)), Operator.class))[0], 0, 0, 0, this.availableRobots.get(0));
    ArrayList<ArrayList<String>> missionsList = new ArrayList<ArrayList<String>>();
    ArrayList<String> missions = new ArrayList<String>();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Robots [ ");
    {
      Iterable<Robot> _iterable = IteratorExtensions.<Robot>toIterable(Iterators.<Robot>filter(resource.getAllContents(), Robot.class));
      for(final Robot robot : _iterable) {
        String _name_1 = robot.getName();
        _builder.append(_name_1);
        _builder.append(",");
      }
    }
    _builder.append(" ]");
    _builder.newLineIfNotEmpty();
    _builder.append("Events [ ");
    {
      Iterable<Condition> _iterable_1 = IteratorExtensions.<Condition>toIterable(Iterators.<Condition>filter(resource.getAllContents(), Condition.class));
      for(final Condition condition : _iterable_1) {
        {
          Class<? extends Condition> _class = condition.getClass();
          boolean _equals = Objects.equal(_class, EventImpl.class);
          if (_equals) {
            String _name_2 = condition.getName();
            _builder.append(_name_2);
            _builder.append(" ");
            String _description = condition.getDescription();
            _builder.append(_description);
            _builder.append(",");
          }
        }
      }
    }
    _builder.append(" ]");
    _builder.newLineIfNotEmpty();
    _builder.append("Actions [ ");
    {
      Iterable<Condition> _iterable_2 = IteratorExtensions.<Condition>toIterable(Iterators.<Condition>filter(resource.getAllContents(), Condition.class));
      for(final Condition condition_1 : _iterable_2) {
        {
          Class<? extends Condition> _class_1 = condition_1.getClass();
          boolean _equals_1 = Objects.equal(_class_1, ActionImpl.class);
          if (_equals_1) {
            String _name_3 = condition_1.getName();
            _builder.append(_name_3);
            _builder.append(" ");
            String _description_1 = condition_1.getDescription();
            _builder.append(_description_1);
            _builder.append(",");
          }
        }
      }
    }
    _builder.append(" ]");
    _builder.newLineIfNotEmpty();
    _builder.append("StoppingEvents [ ");
    {
      int _length_1 = ((Object[])Conversions.unwrapArray(this.stoppingEvents, Object.class)).length;
      ExclusiveRange _doubleDotLessThan_1 = new ExclusiveRange(0, _length_1, true);
      for(final Integer j : _doubleDotLessThan_1) {
        _builder.append("{");
        String _get_1 = this.stoppingEvents.get((j).intValue());
        _builder.append(_get_1);
        _builder.append("}");
      }
    }
    _builder.append(" ]");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    fsa.generateFile("mission_data.ms", _builder);
    for (int i_1 = 0; (i_1 < ((Object[])Conversions.unwrapArray(this.availableRobots, Object.class)).length); i_1++) {
      String _get_2 = this.availableRobots.get(i_1);
      String _plus = ("mission_" + _get_2);
      String _plus_1 = (_plus + ".ms");
      StringConcatenation _builder_1 = new StringConcatenation();
      {
        int _length_2 = ((Object[])Conversions.unwrapArray(this.robotsList.get(i_1), Object.class)).length;
        ExclusiveRange _doubleDotLessThan_2 = new ExclusiveRange(0, _length_2, true);
        for(final Integer j_1 : _doubleDotLessThan_2) {
          {
            if ((this.robotsList.get(i_1).get((j_1).intValue()).indentation == 0)) {
              _builder_1.append(this.robotsList.get(i_1).get((j_1).intValue()).name);
              _builder_1.append(missions = this.robotsList.get(i_1).get((j_1).intValue()).missionList);
              _builder_1.newLineIfNotEmpty();
            } else {
              if ((this.robotsList.get(i_1).get((j_1).intValue()).indentation == 1)) {
                _builder_1.newLine();
                _builder_1.append("\t");
                _builder_1.append(this.robotsList.get(i_1).get((j_1).intValue()).name, "\t");
                _builder_1.append(missions = this.robotsList.get(i_1).get((j_1).intValue()).missionList, "\t");
                _builder_1.newLineIfNotEmpty();
              } else {
                if ((this.robotsList.get(i_1).get((j_1).intValue()).indentation == 2)) {
                  _builder_1.newLine();
                  _builder_1.append("\t\t");
                  _builder_1.append(this.robotsList.get(i_1).get((j_1).intValue()).name, "\t\t");
                  _builder_1.append(missions = this.robotsList.get(i_1).get((j_1).intValue()).missionList, "\t\t");
                  _builder_1.newLineIfNotEmpty();
                } else {
                  if ((this.robotsList.get(i_1).get((j_1).intValue()).indentation == 3)) {
                    _builder_1.newLine();
                    _builder_1.append("\t\t\t");
                    _builder_1.append(this.robotsList.get(i_1).get((j_1).intValue()).name, "\t\t\t");
                    _builder_1.append(missions = this.robotsList.get(i_1).get((j_1).intValue()).missionList, "\t\t\t");
                    _builder_1.newLineIfNotEmpty();
                  } else {
                    if ((this.robotsList.get(i_1).get((j_1).intValue()).indentation == 4)) {
                      _builder_1.newLine();
                      _builder_1.append("\t\t\t\t");
                      _builder_1.append(this.robotsList.get(i_1).get((j_1).intValue()).name, "\t\t\t\t");
                      _builder_1.append(missions = this.robotsList.get(i_1).get((j_1).intValue()).missionList, "\t\t\t\t");
                      _builder_1.newLineIfNotEmpty();
                    } else {
                      if ((this.robotsList.get(i_1).get((j_1).intValue()).indentation == 5)) {
                        _builder_1.newLine();
                        _builder_1.append("\t\t\t\t\t");
                        _builder_1.append(this.robotsList.get(i_1).get((j_1).intValue()).name, "\t\t\t\t\t");
                        _builder_1.append(missions = this.robotsList.get(i_1).get((j_1).intValue()).missionList, "\t\t\t\t\t");
                        _builder_1.newLineIfNotEmpty();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      _builder_1.newLine();
      _builder_1.newLine();
      fsa.generateFile(_plus_1, _builder_1);
    }
    for (int i_1 = (((Object[])Conversions.unwrapArray(this.robotsList, Object.class)).length - 1); (i_1 >= 0); i_1--) {
      for (int j_1 = (((Object[])Conversions.unwrapArray(this.robotsList.get(i_1), Object.class)).length - 1); (j_1 >= 0); j_1--) {
        this.robotsList.get(i_1).remove(j_1);
      }
    }
    for (int i_1 = (((Object[])Conversions.unwrapArray(this.availableRobots, Object.class)).length - 1); (i_1 >= 0); i_1--) {
      this.availableRobots.remove(i_1);
    }
    for (int i_1 = (((Object[])Conversions.unwrapArray(this.stoppingEvents, Object.class)).length - 1); (i_1 >= 0); i_1--) {
      this.stoppingEvents.remove(i_1);
    }
  }
  
  public Object nestedMethod(final CompositionOperator in, final int index, final int suboperator, final int robot, final int indentation, final String parent) {
    return this.doLogic(in.getInputOperators().get(suboperator), index, robot, indentation, parent);
  }
  
  protected Boolean _doLogic(final SequenceOp in, final int index, final int robot, final int indentation, final String parent) {
    ArrayList<String> names = new ArrayList<String>();
    int counter = 0;
    boolean _isEmpty = this.robotsList.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      for (counter = 0; (counter < ((Object[])Conversions.unwrapArray(this.robotsList.get(robot), Object.class)).length); counter++) {
        names.add(this.robotsList.get(robot).get(counter).name);
      }
    }
    int _length = in.getInputOperators().toArray().length;
    ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _length, true);
    for (final Integer i : _doubleDotLessThan) {
      this.nestedMethod(in, index, (i).intValue(), robot, indentation, parent);
    }
    return null;
  }
  
  protected Boolean _doLogic(final ParallelOp in, final int index, final int robot, final int indentation, final String parent) {
    this.nestedMethod(in, index, 0, robot, indentation, this.availableRobots.get(robot));
    ArrayList<ArrayList<String>> names = new ArrayList<ArrayList<String>>();
    ArrayList<Integer> counter = new ArrayList<Integer>();
    boolean _isEmpty = this.robotsList.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      for (int i = 0; (i < ((Object[])Conversions.unwrapArray(this.robotsList, Object.class)).length); i++) {
        {
          counter.add(Integer.valueOf(0));
          ArrayList<String> _arrayList = new ArrayList<String>();
          names.add(_arrayList);
          for (int j = 0; (j < ((Object[])Conversions.unwrapArray(this.robotsList.get(i), Object.class)).length); j++) {
            {
              counter.add(i, Integer.valueOf(j));
              names.get((robot + i)).add(this.robotsList.get((robot + i)).get((counter.get(j)).intValue()).name);
            }
          }
        }
      }
    }
    int _length = ((Object[])Conversions.unwrapArray(in.getInputOperators(), Object.class)).length;
    boolean _greaterThan = (_length > 0);
    if (_greaterThan) {
      int _length_1 = ((Object[])Conversions.unwrapArray(in.getInputOperators(), Object.class)).length;
      ExclusiveRange _doubleDotLessThan = new ExclusiveRange(1, _length_1, true);
      for (final Integer i : _doubleDotLessThan) {
        {
          ArrayList<robotClass> _get = this.robotsList.get((robot + (i).intValue()));
          String _get_1 = this.availableRobots.get((robot + (i).intValue()));
          ArrayList<String> _arrayList = new ArrayList<String>();
          robotClass _robotClass = new robotClass(_get_1, _arrayList, indentation);
          _get.add(_robotClass);
          names.get((robot + (i).intValue())).add(this.robotsList.get((robot + (i).intValue())).get(0).name);
          this.nestedMethod(in, names.get((i).intValue()).indexOf(this.availableRobots.get((robot + (i).intValue()))), (i).intValue(), (robot + (i).intValue()), indentation, this.availableRobots.get((robot + (i).intValue())));
        }
      }
    }
    return null;
  }
  
  protected Boolean _doLogic(final EventHandlerOp in, final int index, final int robot, final int indentation, final String parent) {
    this.nestedMethod(in, index, 0, robot, indentation, parent);
    int counter = 0;
    ArrayList<String> names = new ArrayList<String>();
    for (int i = 1; (i < ((Object[])Conversions.unwrapArray(in.getInputOperators(), Object.class)).length); i++) {
      {
        for (counter = 0; (counter < ((Object[])Conversions.unwrapArray(this.robotsList.get(robot), Object.class)).length); counter++) {
          names.add(this.robotsList.get(robot).get(counter).name);
        }
        ArrayList<robotClass> _get = this.robotsList.get(robot);
        String _name = in.getInputObservedEvents().get((i - 1)).getName();
        String _plus = ("eh_" + _name);
        ArrayList<String> _arrayList = new ArrayList<String>();
        robotClass _robotClass = new robotClass(_plus, _arrayList, (indentation + 1));
        _get.add(_robotClass);
        String _name_1 = in.getInputObservedEvents().get((i - 1)).getName();
        String _plus_1 = ("eh_" + _name_1);
        this.nestedMethod(in, counter, i, robot, (indentation + 1), _plus_1);
        for (int j = (((Object[])Conversions.unwrapArray(names, Object.class)).length - 1); (j >= 0); j--) {
          names.remove(j);
        }
        for (counter = 0; (counter < ((Object[])Conversions.unwrapArray(this.robotsList.get(robot), Object.class)).length); counter++) {
          names.add(this.robotsList.get(robot).get(counter).name);
        }
      }
    }
    return null;
  }
  
  protected Boolean _doLogic(final FallBackOp in, final int index, final int robot, final int indentation, final String parent) {
    int counter = 0;
    ArrayList<String> names = new ArrayList<String>();
    for (counter = 0; (counter < ((Object[])Conversions.unwrapArray(this.robotsList.get(robot), Object.class)).length); counter++) {
      names.add(this.robotsList.get(robot).get(counter).name);
    }
    for (int i = 1; (i <= ((Object[])Conversions.unwrapArray(in.getInputOperators(), Object.class)).length); i++) {
      {
        ArrayList<robotClass> _get = this.robotsList.get(robot);
        ArrayList<String> _arrayList = new ArrayList<String>();
        robotClass _robotClass = new robotClass(("fb_" + Integer.valueOf(i)), _arrayList, (indentation + 1));
        _get.add(_robotClass);
        this.nestedMethod(in, counter, (i - 1), robot, (indentation + 1), ("fb_" + Integer.valueOf(i)));
        for (int j = (((Object[])Conversions.unwrapArray(names, Object.class)).length - 1); (j >= 0); j--) {
          names.remove(j);
        }
        for (counter = 0; (counter < ((Object[])Conversions.unwrapArray(this.robotsList.get(robot), Object.class)).length); counter++) {
          names.add(this.robotsList.get(robot).get(counter).name);
        }
      }
    }
    return null;
  }
  
  protected Boolean _doLogic(final ConditionOp in, final int index, final int robot, final int indentation, final String parent) {
    int counter = 0;
    ArrayList<String> names = new ArrayList<String>();
    for (counter = 0; (counter < ((Object[])Conversions.unwrapArray(this.robotsList.get(robot), Object.class)).length); counter++) {
      names.add(this.robotsList.get(robot).get(counter).name);
    }
    for (int i = 1; (i <= ((Object[])Conversions.unwrapArray(in.getInputOperators(), Object.class)).length); i++) {
      {
        ArrayList<robotClass> _get = this.robotsList.get(robot);
        String _name = in.getInputEvents().get((i - 1)).getName();
        String _plus = ("cond_" + _name);
        ArrayList<String> _arrayList = new ArrayList<String>();
        robotClass _robotClass = new robotClass(_plus, _arrayList, (indentation + 1));
        _get.add(_robotClass);
        String _name_1 = in.getInputEvents().get((i - 1)).getName();
        String _plus_1 = ("cond_" + _name_1);
        this.nestedMethod(in, counter, (i - 1), robot, (indentation + 1), _plus_1);
        for (int j = (((Object[])Conversions.unwrapArray(names, Object.class)).length - 1); (j >= 0); j--) {
          names.remove(j);
        }
        for (counter = 0; (counter < ((Object[])Conversions.unwrapArray(this.robotsList.get(robot), Object.class)).length); counter++) {
          names.add(this.robotsList.get(robot).get(counter).name);
        }
      }
    }
    return null;
  }
  
  protected Boolean _doLogic(final DelegateOp in, final int index, final int robot, final int indentation, final String parent) {
    boolean _xblockexpression = false;
    {
      String template = new String();
      String _name = in.getPattern().eClass().getName();
      boolean _equals = Objects.equal(_name, "Visit");
      if (_equals) {
        String _name_1 = in.getInputLocations().get(0).getName();
        String _plus = ("<> (" + _name_1);
        String _plus_1 = (_plus + ")");
        template = _plus_1;
        for (int i = 1; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
          String _name_2 = in.getInputLocations().get(i).getName();
          String _plus_2 = ((template + " && <> (") + _name_2);
          String _plus_3 = (_plus_2 + ")");
          template = _plus_3;
        }
      } else {
        String _name_2 = in.getPattern().eClass().getName();
        boolean _equals_1 = Objects.equal(_name_2, "FairVisit");
        if (_equals_1) {
          String _name_3 = in.getInputLocations().get(0).getName();
          String _plus_2 = ("<> (" + _name_3);
          String _plus_3 = (_plus_2 + ")");
          template = _plus_3;
          for (int j = 0; (j < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); j++) {
            if ((j == 0)) {
              for (int i = 1; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                String _name_4 = in.getInputLocations().get(i).getName();
                String _plus_4 = ((template + " && <> (") + _name_4);
                String _plus_5 = (_plus_4 + ")");
                template = _plus_5;
              }
              String _name_4 = in.getInputLocations().get(j).getName();
              String _plus_4 = ((template + " && [] ((") + _name_4);
              String _plus_5 = (_plus_4 + ") -> X ((!");
              String _name_5 = in.getInputLocations().get(j).getName();
              String _plus_6 = (_plus_5 + _name_5);
              String _plus_7 = (_plus_6 + ") W (");
              String _name_6 = in.getInputLocations().get((j + 1)).getName();
              String _plus_8 = (_plus_7 + _name_6);
              String _plus_9 = (_plus_8 + ")))");
              template = _plus_9;
              for (int i = 2; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                String _name_7 = in.getInputLocations().get(j).getName();
                String _plus_10 = ((template + " && ((!") + _name_7);
                String _plus_11 = (_plus_10 + ") W (");
                String _name_8 = in.getInputLocations().get(i).getName();
                String _plus_12 = (_plus_11 + _name_8);
                String _plus_13 = (_plus_12 + ")))");
                template = _plus_13;
              }
            } else {
              String _name_7 = in.getInputLocations().get(j).getName();
              String _plus_10 = ((template + " && [] ((") + _name_7);
              String _plus_11 = (_plus_10 + ") -> X ((!");
              String _name_8 = in.getInputLocations().get(j).getName();
              String _plus_12 = (_plus_11 + _name_8);
              String _plus_13 = (_plus_12 + ") W (");
              String _name_9 = in.getInputLocations().get(0).getName();
              String _plus_14 = (_plus_13 + _name_9);
              String _plus_15 = (_plus_14 + ")))");
              template = _plus_15;
              for (int i = 1; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                if ((i != j)) {
                  String _name_10 = in.getInputLocations().get(j).getName();
                  String _plus_16 = ((template + " && ((!") + _name_10);
                  String _plus_17 = (_plus_16 + ") W (");
                  String _name_11 = in.getInputLocations().get(i).getName();
                  String _plus_18 = (_plus_17 + _name_11);
                  String _plus_19 = (_plus_18 + ")))");
                  template = _plus_19;
                }
              }
            }
          }
        } else {
          String _name_4 = in.getPattern().eClass().getName();
          boolean _equals_2 = Objects.equal(_name_4, "OrderderVisit");
          if (_equals_2) {
            String _name_5 = in.getInputLocations().get(0).getName();
            String _plus_4 = ("(<> (" + _name_5);
            String _plus_5 = (_plus_4 + ")");
            template = _plus_5;
            for (int i = 1; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
              String _name_6 = in.getInputLocations().get(i).getName();
              String _plus_6 = ((template + " && <> ((") + _name_6);
              String _plus_7 = (_plus_6 + ")");
              template = _plus_7;
            }
            for (int i = 0; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
              template = (template + ")");
            }
            for (int j = (((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length - 1); (j > 0); j--) {
              for (int i = (j - 1); (i >= 0); i--) {
                String _name_6 = in.getInputLocations().get(j).getName();
                String _plus_6 = ((template + " && ((!") + _name_6);
                String _plus_7 = (_plus_6 + ") U (");
                String _name_7 = in.getInputLocations().get(i).getName();
                String _plus_8 = (_plus_7 + _name_7);
                String _plus_9 = (_plus_8 + "))");
                template = _plus_9;
              }
            }
          } else {
            String _name_6 = in.getPattern().eClass().getName();
            boolean _equals_3 = Objects.equal(_name_6, "SequencedVisit");
            if (_equals_3) {
              String _name_7 = in.getInputLocations().get(0).getName();
              String _plus_6 = ("<> ((" + _name_7);
              String _plus_7 = (_plus_6 + ")");
              template = _plus_7;
              for (int i = 1; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                String _name_8 = in.getInputLocations().get(i).getName();
                String _plus_8 = ((template + " && (<> (") + _name_8);
                String _plus_9 = (_plus_8 + ")");
                template = _plus_9;
              }
              for (int i = 0; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                template = (template + ")");
              }
            } else {
              String _name_8 = in.getPattern().eClass().getName();
              boolean _equals_4 = Objects.equal(_name_8, "StrictOrderedVisit");
              if (_equals_4) {
                String _name_9 = in.getInputLocations().get(0).getName();
                String _plus_8 = ("<> ((" + _name_9);
                String _plus_9 = (_plus_8 + ")");
                template = _plus_9;
                for (int i = 1; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                  String _name_10 = in.getInputLocations().get(i).getName();
                  String _plus_10 = ((template + " && <> (") + _name_10);
                  String _plus_11 = (_plus_10 + ")");
                  template = _plus_11;
                }
                template = (template + ")");
                for (int j = (((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length - 1); (j >= 0); j--) {
                  for (int i = (((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length - 1); (i >= 0); i--) {
                    if ((i != j)) {
                      String _name_10 = in.getInputLocations().get(j).getName();
                      String _plus_10 = ((template + " && ((!") + _name_10);
                      String _plus_11 = (_plus_10 + ") U (");
                      String _name_11 = in.getInputLocations().get(i).getName();
                      String _plus_12 = (_plus_11 + _name_11);
                      String _plus_13 = (_plus_12 + "))");
                      template = _plus_13;
                    }
                  }
                }
                for (int j = (((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length - 1); (j > 0); j--) {
                  for (int i = (j - 1); (i >= 0); i--) {
                    if ((i != j)) {
                      String _name_10 = in.getInputLocations().get(j).getName();
                      String _plus_10 = ((template + " && <> (") + _name_10);
                      String _plus_11 = (_plus_10 + " && X(((! ");
                      String _name_11 = in.getInputLocations().get(j).getName();
                      String _plus_12 = (_plus_11 + _name_11);
                      String _plus_13 = (_plus_12 + ")) U ");
                      String _name_12 = in.getInputLocations().get(i).getName();
                      String _plus_14 = (_plus_13 + _name_12);
                      String _plus_15 = (_plus_14 + "))");
                      template = _plus_15;
                    }
                  }
                }
              } else {
                String _name_10 = in.getPattern().eClass().getName();
                boolean _equals_5 = Objects.equal(_name_10, "Patrolling");
                if (_equals_5) {
                  String _name_11 = in.getInputLocations().get(0).getName();
                  String _plus_10 = ("[] (<> (" + _name_11);
                  String _plus_11 = (_plus_10 + ")");
                  template = _plus_11;
                  for (int i = 1; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                    String _name_12 = in.getInputLocations().get(i).getName();
                    String _plus_12 = ((template + " && <> (") + _name_12);
                    String _plus_13 = (_plus_12 + ")");
                    template = _plus_13;
                  }
                  template = (template + ")");
                } else {
                  String _name_12 = in.getPattern().eClass().getName();
                  boolean _equals_6 = Objects.equal(_name_12, "FairPatrolling");
                  if (_equals_6) {
                    String _name_13 = in.getInputLocations().get(0).getName();
                    String _plus_12 = ("[] (<> (" + _name_13);
                    String _plus_13 = (_plus_12 + ")");
                    template = _plus_13;
                    for (int j = 0; (j < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); j++) {
                      if ((j == 0)) {
                        for (int i = 1; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                          String _name_14 = in.getInputLocations().get(i).getName();
                          String _plus_14 = ((template + " && <> (") + _name_14);
                          String _plus_15 = (_plus_14 + ")");
                          template = _plus_15;
                        }
                        String _name_14 = in.getInputLocations().get(j).getName();
                        String _plus_14 = ((template + ") && [] ((") + _name_14);
                        String _plus_15 = (_plus_14 + ") -> X ((!");
                        String _name_15 = in.getInputLocations().get(j).getName();
                        String _plus_16 = (_plus_15 + _name_15);
                        String _plus_17 = (_plus_16 + ") U (");
                        String _name_16 = in.getInputLocations().get((j + 1)).getName();
                        String _plus_18 = (_plus_17 + _name_16);
                        String _plus_19 = (_plus_18 + "))");
                        template = _plus_19;
                        for (int i = 2; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                          String _name_17 = in.getInputLocations().get(j).getName();
                          String _plus_20 = ((template + " && ((!") + _name_17);
                          String _plus_21 = (_plus_20 + ") U (");
                          String _name_18 = in.getInputLocations().get(i).getName();
                          String _plus_22 = (_plus_21 + _name_18);
                          String _plus_23 = (_plus_22 + "))");
                          template = _plus_23;
                        }
                        template = (template + ")");
                      } else {
                        String _name_17 = in.getInputLocations().get(j).getName();
                        String _plus_20 = ((template + " && [] ((") + _name_17);
                        String _plus_21 = (_plus_20 + ") -> X ((!");
                        String _name_18 = in.getInputLocations().get(j).getName();
                        String _plus_22 = (_plus_21 + _name_18);
                        String _plus_23 = (_plus_22 + ") U (");
                        String _name_19 = in.getInputLocations().get(0).getName();
                        String _plus_24 = (_plus_23 + _name_19);
                        String _plus_25 = (_plus_24 + "))");
                        template = _plus_25;
                        for (int i = 1; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                          if ((i != j)) {
                            String _name_20 = in.getInputLocations().get(j).getName();
                            String _plus_26 = ((template + " && ((!") + _name_20);
                            String _plus_27 = (_plus_26 + ") U (");
                            String _name_21 = in.getInputLocations().get(i).getName();
                            String _plus_28 = (_plus_27 + _name_21);
                            String _plus_29 = (_plus_28 + "))");
                            template = _plus_29;
                          }
                        }
                      }
                    }
                    template = (template + ")");
                  } else {
                    String _name_14 = in.getPattern().eClass().getName();
                    boolean _equals_7 = Objects.equal(_name_14, "OrderedPatrolling");
                    if (_equals_7) {
                      String _name_15 = in.getInputLocations().get(0).getName();
                      String _plus_14 = ("[] (<> ((" + _name_15);
                      String _plus_15 = (_plus_14 + ")");
                      template = _plus_15;
                      for (int i = 1; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                        String _name_16 = in.getInputLocations().get(i).getName();
                        String _plus_16 = ((template + " && <> ((") + _name_16);
                        String _plus_17 = (_plus_16 + ")");
                        template = _plus_17;
                      }
                      for (int i = 0; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                        template = (template + ")");
                      }
                      for (int j = (((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length - 1); (j > 0); j--) {
                        for (int i = (j - 1); (i >= 0); i--) {
                          String _name_16 = in.getInputLocations().get(j).getName();
                          String _plus_16 = ((template + " && (! (") + _name_16);
                          String _plus_17 = (_plus_16 + ") U (");
                          String _name_17 = in.getInputLocations().get(i).getName();
                          String _plus_18 = (_plus_17 + _name_17);
                          String _plus_19 = (_plus_18 + "))");
                          template = _plus_19;
                        }
                      }
                      for (int j = (((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length - 1); (j > 0); j--) {
                        for (int i = (j - 1); (i >= 0); i--) {
                          String _name_16 = in.getInputLocations().get(j).getName();
                          String _plus_16 = ((template + " && [] (") + _name_16);
                          String _plus_17 = (_plus_16 + " -> X((! ");
                          String _name_17 = in.getInputLocations().get(j).getName();
                          String _plus_18 = (_plus_17 + _name_17);
                          String _plus_19 = (_plus_18 + ") U ");
                          String _name_18 = in.getInputLocations().get(i).getName();
                          String _plus_20 = (_plus_19 + _name_18);
                          String _plus_21 = (_plus_20 + "))");
                          template = _plus_21;
                        }
                      }
                    } else {
                      String _name_16 = in.getPattern().eClass().getName();
                      boolean _equals_8 = Objects.equal(_name_16, "StrictOreredPatrolling");
                      if (_equals_8) {
                        String _name_17 = in.getInputLocations().get(0).getName();
                        String _plus_16 = ("[] (<> ((" + _name_17);
                        String _plus_17 = (_plus_16 + ")");
                        template = _plus_17;
                        for (int i = 1; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                          String _name_18 = in.getInputLocations().get(i).getName();
                          String _plus_18 = ((template + " && <> ((") + _name_18);
                          String _plus_19 = (_plus_18 + ")");
                          template = _plus_19;
                        }
                        for (int i = 0; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                          template = (template + ")");
                        }
                        for (int j = (((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length - 1); (j >= 0); j--) {
                          for (int i = (((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length - 1); (i >= 0); i--) {
                            if ((i != j)) {
                              String _name_18 = in.getInputLocations().get(j).getName();
                              String _plus_18 = ((template + " && ((!") + _name_18);
                              String _plus_19 = (_plus_18 + ") U (");
                              String _name_19 = in.getInputLocations().get(i).getName();
                              String _plus_20 = (_plus_19 + _name_19);
                              String _plus_21 = (_plus_20 + "))");
                              template = _plus_21;
                            }
                          }
                        }
                        for (int j = (((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length - 1); (j > 0); j--) {
                          for (int i = (j - 1); (i >= 0); i--) {
                            if ((i != j)) {
                              String _name_18 = in.getInputLocations().get(j).getName();
                              String _plus_18 = ((template + " && [] (") + _name_18);
                              String _plus_19 = (_plus_18 + " -> X((! ");
                              String _name_19 = in.getInputLocations().get(j).getName();
                              String _plus_20 = (_plus_19 + _name_19);
                              String _plus_21 = (_plus_20 + ")) U ");
                              String _name_20 = in.getInputLocations().get(i).getName();
                              String _plus_22 = (_plus_21 + _name_20);
                              String _plus_23 = (_plus_22 + "))");
                              template = _plus_23;
                            }
                          }
                        }
                      } else {
                        String _name_18 = in.getPattern().eClass().getName();
                        boolean _equals_9 = Objects.equal(_name_18, "SequencedPatrolling");
                        if (_equals_9) {
                          String _name_19 = in.getInputLocations().get(0).getName();
                          String _plus_18 = ("[] (<> ((" + _name_19);
                          String _plus_19 = (_plus_18 + ")");
                          template = _plus_19;
                          for (int i = 1; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                            String _name_20 = in.getInputLocations().get(i).getName();
                            String _plus_20 = ((template + " && <> ((") + _name_20);
                            String _plus_21 = (_plus_20 + ")");
                            template = _plus_21;
                          }
                          for (int i = 0; (i < ((((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length * 2) - 1)); i++) {
                            template = (template + ")");
                          }
                        } else {
                          String _name_20 = in.getPattern().eClass().getName();
                          boolean _equals_10 = Objects.equal(_name_20, "ExactRestrictedAvoidance");
                          if (_equals_10) {
                            String _description = in.getInputAction().get(0).getDescription();
                            String _plus_20 = ("(! (" + _description);
                            String _plus_21 = (_plus_20 + ")) U (");
                            String _description_1 = in.getInputAction().get(0).getDescription();
                            String _plus_22 = (_plus_21 + _description_1);
                            String _plus_23 = (_plus_22 + " && (X ((! ");
                            String _description_2 = in.getInputAction().get(0).getDescription();
                            String _plus_24 = (_plus_23 + _description_2);
                            String _plus_25 = (_plus_24 + ") U (");
                            String _description_3 = in.getInputAction().get(0).getDescription();
                            String _plus_26 = (_plus_25 + _description_3);
                            String _plus_27 = (_plus_26 + " && (X ((! ");
                            String _description_4 = in.getInputAction().get(0).getDescription();
                            String _plus_28 = (_plus_27 + _description_4);
                            String _plus_29 = (_plus_28 + ") U (");
                            String _description_5 = in.getInputAction().get(0).getDescription();
                            String _plus_30 = (_plus_29 + _description_5);
                            String _plus_31 = (_plus_30 + " && (X ([] (!  ");
                            String _description_6 = in.getInputAction().get(0).getDescription();
                            String _plus_32 = (_plus_31 + _description_6);
                            String _plus_33 = (_plus_32 + "))))))))))");
                            template = _plus_33;
                          } else {
                            String _name_21 = in.getPattern().eClass().getName();
                            boolean _equals_11 = Objects.equal(_name_21, "FutureAvoidance");
                            if (_equals_11) {
                              String _description_7 = in.getInputAction().get(0).getDescription();
                              String _plus_34 = ("[] ((" + _description_7);
                              String _plus_35 = (_plus_34 + "-> ([] ! (");
                              String _name_22 = in.getInputLocations().get(0).getName();
                              String _plus_36 = (_plus_35 + _name_22);
                              String _plus_37 = (_plus_36 + "))");
                              template = _plus_37;
                            } else {
                              String _name_23 = in.getPattern().eClass().getName();
                              boolean _equals_12 = Objects.equal(_name_23, "GlobalAvoidance");
                              if (_equals_12) {
                                String _name_24 = in.getInputLocations().get(0).getName();
                                String _plus_38 = ("[] (! (" + _name_24);
                                String _plus_39 = (_plus_38 + "))");
                                template = _plus_39;
                              } else {
                                String _name_25 = in.getPattern().eClass().getName();
                                boolean _equals_13 = Objects.equal(_name_25, "LowerRestricedAvoidance");
                                if (_equals_13) {
                                  String _name_26 = in.getInputLocations().get(0).getName();
                                  String _plus_40 = ("<> ((" + _name_26);
                                  String _plus_41 = (_plus_40 + ") && X (<>((");
                                  String _name_27 = in.getInputLocations().get(0).getName();
                                  String _plus_42 = (_plus_41 + _name_27);
                                  String _plus_43 = (_plus_42 + ") && X <>( (");
                                  String _name_28 = in.getInputLocations().get(0).getName();
                                  String _plus_44 = (_plus_43 + _name_28);
                                  String _plus_45 = (_plus_44 + ")))))");
                                  template = _plus_45;
                                } else {
                                  String _name_29 = in.getPattern().eClass().getName();
                                  boolean _equals_14 = Objects.equal(_name_29, "PastAvoidance");
                                  if (_equals_14) {
                                    String _name_30 = in.getInputLocations().get(0).getName();
                                    String _plus_46 = ("((! (" + _name_30);
                                    String _plus_47 = (_plus_46 + ")) U ");
                                    String _name_31 = in.getInputLocations().get(0).getName();
                                    String _plus_48 = (_plus_47 + _name_31);
                                    String _plus_49 = (_plus_48 + ")");
                                    template = _plus_49;
                                  } else {
                                    String _name_32 = in.getPattern().eClass().getName();
                                    boolean _equals_15 = Objects.equal(_name_32, "UpperRestricedAvoidance");
                                    if (_equals_15) {
                                      String _name_33 = in.getInputLocations().get(0).getName();
                                      String _plus_50 = ("! <> ((" + _name_33);
                                      String _plus_51 = (_plus_50 + ") && X (<>((");
                                      String _name_34 = in.getInputLocations().get(0).getName();
                                      String _plus_52 = (_plus_51 + _name_34);
                                      String _plus_53 = (_plus_52 + ") && X <>( (");
                                      String _name_35 = in.getInputLocations().get(0).getName();
                                      String _plus_54 = (_plus_53 + _name_35);
                                      String _plus_55 = (_plus_54 + ")))))");
                                      template = _plus_55;
                                    } else {
                                      String _name_36 = in.getPattern().eClass().getName();
                                      boolean _equals_16 = Objects.equal(_name_36, "InstantReaction");
                                      if (_equals_16) {
                                        String _description_8 = in.getInputAction().get(0).getDescription();
                                        String _plus_56 = ("[] (true -> " + _description_8);
                                        String _plus_57 = (_plus_56 + ")");
                                        template = _plus_57;
                                      } else {
                                        String _name_37 = in.getPattern().eClass().getName();
                                        boolean _equals_17 = Objects.equal(_name_37, "DelayedReaction");
                                        if (_equals_17) {
                                          String _description_9 = in.getInputAction().get(0).getDescription();
                                          String _plus_58 = ("[] (true -> (<> (" + _description_9);
                                          String _plus_59 = (_plus_58 + "))");
                                          template = _plus_59;
                                        } else {
                                          String _name_38 = in.getPattern().eClass().getName();
                                          boolean _equals_18 = Objects.equal(_name_38, "Wait");
                                          if (_equals_18) {
                                            String _name_39 = in.getInputLocations().get(0).getName();
                                            String _plus_60 = ("[] (<> (" + _name_39);
                                            String _plus_61 = (_plus_60 + "))");
                                            template = _plus_61;
                                          } else {
                                            String _name_40 = in.getPattern().eClass().getName();
                                            boolean _equals_19 = Objects.equal(_name_40, "SimpleAction");
                                            if (_equals_19) {
                                              String _description_10 = in.getInputAction().get(0).getDescription();
                                              String _plus_62 = ("(X " + _description_10);
                                              String _plus_63 = (_plus_62 + ")");
                                              template = _plus_63;
                                            } else {
                                              template = "Pattern not recognized";
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      int _size = in.getStoppingEvent().size();
      boolean _greaterThan = (_size > 0);
      if (_greaterThan) {
        for (int i = 0; (i < ((Object[])Conversions.unwrapArray(in.getStoppingEvent(), Object.class)).length); i++) {
          String _get = this.availableRobots.get(robot);
          String _plus_64 = (_get + ",");
          String _plus_65 = (_plus_64 + template);
          String _plus_66 = (_plus_65 + ",");
          String _name_41 = in.getStoppingEvent().get(i).getName();
          String _plus_67 = (_plus_66 + _name_41);
          this.stoppingEvents.add(_plus_67);
        }
      }
      _xblockexpression = this.robotsList.get(robot).get(index).missionList.add(template);
    }
    return Boolean.valueOf(_xblockexpression);
  }
  
  public Boolean doLogic(final Operator in, final int index, final int robot, final int indentation, final String parent) {
    if (in instanceof ConditionOp) {
      return _doLogic((ConditionOp)in, index, robot, indentation, parent);
    } else if (in instanceof EventHandlerOp) {
      return _doLogic((EventHandlerOp)in, index, robot, indentation, parent);
    } else if (in instanceof FallBackOp) {
      return _doLogic((FallBackOp)in, index, robot, indentation, parent);
    } else if (in instanceof ParallelOp) {
      return _doLogic((ParallelOp)in, index, robot, indentation, parent);
    } else if (in instanceof SequenceOp) {
      return _doLogic((SequenceOp)in, index, robot, indentation, parent);
    } else if (in instanceof DelegateOp) {
      return _doLogic((DelegateOp)in, index, robot, indentation, parent);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(in, index, robot, indentation, parent).toString());
    }
  }
}
