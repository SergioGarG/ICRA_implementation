/**
 * generated by Xtext 2.12.0
 */
package se.gu.co4robots.xtext.promise.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import java.util.ArrayList;
import java.util.Arrays;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.ExclusiveRange;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import promise.ANDOp;
import promise.Action;
import promise.CompositionOperator;
import promise.ConditionOp;
import promise.DelegateOp;
import promise.Event;
import promise.EventHandlerOp;
import promise.FallBackOp;
import promise.OROp;
import promise.Operator;
import promise.ParallelOp;
import promise.Robot;
import promise.SequenceOp;
import se.gu.co4robots.xtext.promise.generator.robotClass;

@SuppressWarnings("all")
public class PromiseGenerator extends AbstractGenerator {
  private ArrayList<ArrayList<robotClass>> robotsList = new ArrayList<ArrayList<robotClass>>();
  
  private ArrayList<String> availableRobots = new ArrayList<String>();
  
  private ArrayList<String> stoppingEvents = new ArrayList<String>();
  
  private ArrayList<String> textarray = new ArrayList<String>();
  
  private String text = new String();
  
  private String template = new String();
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    for (int i = (((Object[])Conversions.unwrapArray(this.robotsList, Object.class)).length - 1); (i >= 0); i--) {
      for (int j = (((Object[])Conversions.unwrapArray(this.robotsList.get(i), Object.class)).length - 1); (j >= 0); j--) {
        this.robotsList.get(i).remove(j);
      }
    }
    for (int i = (((Object[])Conversions.unwrapArray(this.availableRobots, Object.class)).length - 1); (i >= 0); i--) {
      this.availableRobots.remove(i);
    }
    for (int i = (((Object[])Conversions.unwrapArray(this.textarray, Object.class)).length - 1); (i >= 0); i--) {
      this.textarray.remove(i);
    }
    for (int i = (((Object[])Conversions.unwrapArray(this.stoppingEvents, Object.class)).length - 1); (i >= 0); i--) {
      this.stoppingEvents.remove(i);
    }
    int _length = ((Object[])Conversions.unwrapArray(IteratorExtensions.<Robot>toIterable(Iterators.<Robot>filter(resource.getAllContents(), Robot.class)), Object.class)).length;
    ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _length, true);
    for (final Integer i : _doubleDotLessThan) {
      {
        this.availableRobots.add(((Robot[])Conversions.unwrapArray(IteratorExtensions.<Robot>toIterable(Iterators.<Robot>filter(resource.getAllContents(), Robot.class)), Robot.class))[(i).intValue()].getName());
        ArrayList<robotClass> _arrayList = new ArrayList<robotClass>();
        this.robotsList.add(_arrayList);
      }
    }
    ArrayList<robotClass> _get = this.robotsList.get(0);
    String _name = ((Robot[])Conversions.unwrapArray(IteratorExtensions.<Robot>toIterable(Iterators.<Robot>filter(resource.getAllContents(), Robot.class)), Robot.class))[0].getName();
    ArrayList<String> _arrayList = new ArrayList<String>();
    robotClass _robotClass = new robotClass(_name, _arrayList, 0);
    _get.add(_robotClass);
    this.doLogic(((Operator[])Conversions.unwrapArray(IteratorExtensions.<Operator>toIterable(Iterators.<Operator>filter(resource.getAllContents(), Operator.class)), Operator.class))[0], 0, 0, 0, this.availableRobots.get(0), "");
    ArrayList<ArrayList<String>> missionsList = new ArrayList<ArrayList<String>>();
    ArrayList<String> missions = new ArrayList<String>();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Robots [ ");
    {
      Iterable<Robot> _iterable = IteratorExtensions.<Robot>toIterable(Iterators.<Robot>filter(resource.getAllContents(), Robot.class));
      for(final Robot robot : _iterable) {
        String _name_1 = robot.getName();
        _builder.append(_name_1);
        _builder.append(",");
      }
    }
    _builder.append(" ]");
    _builder.newLineIfNotEmpty();
    _builder.append("Events [ ");
    {
      Iterable<Event> _iterable_1 = IteratorExtensions.<Event>toIterable(Iterators.<Event>filter(resource.getAllContents(), Event.class));
      for(final Event condition : _iterable_1) {
        String _name_2 = condition.getName();
        _builder.append(_name_2);
        _builder.append(" ");
        String _description = condition.getDescription();
        _builder.append(_description);
        _builder.append(",");
      }
    }
    _builder.append(" ]");
    _builder.newLineIfNotEmpty();
    _builder.append("Actions [ ");
    {
      Iterable<Action> _iterable_2 = IteratorExtensions.<Action>toIterable(Iterators.<Action>filter(resource.getAllContents(), Action.class));
      for(final Action condition_1 : _iterable_2) {
        String _name_3 = condition_1.getName();
        _builder.append(_name_3);
        _builder.append(" ");
        String _description_1 = condition_1.getDescription();
        _builder.append(_description_1);
        _builder.append(",");
      }
    }
    _builder.append(" ]");
    _builder.newLineIfNotEmpty();
    _builder.append("StoppingEvents [ ");
    {
      int _length_1 = ((Object[])Conversions.unwrapArray(this.stoppingEvents, Object.class)).length;
      ExclusiveRange _doubleDotLessThan_1 = new ExclusiveRange(0, _length_1, true);
      for(final Integer j : _doubleDotLessThan_1) {
        _builder.append("{");
        String _get_1 = this.stoppingEvents.get((j).intValue());
        _builder.append(_get_1);
        _builder.append("}");
      }
    }
    _builder.append(" ]");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    fsa.generateFile("mission_data.ms", _builder);
    for (int i_1 = 0; (i_1 < ((Object[])Conversions.unwrapArray(this.availableRobots, Object.class)).length); i_1++) {
      {
        String _get_2 = this.availableRobots.get(i_1);
        String _plus = ("mission_" + _get_2);
        String _plus_1 = (_plus + ".ms");
        StringConcatenation _builder_1 = new StringConcatenation();
        {
          int _length_2 = ((Object[])Conversions.unwrapArray(this.robotsList.get(i_1), Object.class)).length;
          ExclusiveRange _doubleDotLessThan_2 = new ExclusiveRange(0, _length_2, true);
          for(final Integer j_1 : _doubleDotLessThan_2) {
            {
              if ((this.robotsList.get(i_1).get((j_1).intValue()).indentation == 0)) {
                _builder_1.append(this.robotsList.get(i_1).get((j_1).intValue()).name);
                _builder_1.append(missions = this.robotsList.get(i_1).get((j_1).intValue()).missionList);
                _builder_1.newLineIfNotEmpty();
              } else {
                if ((this.robotsList.get(i_1).get((j_1).intValue()).indentation == 1)) {
                  _builder_1.newLine();
                  _builder_1.append("\t");
                  _builder_1.append(this.robotsList.get(i_1).get((j_1).intValue()).name, "\t");
                  _builder_1.append(missions = this.robotsList.get(i_1).get((j_1).intValue()).missionList, "\t");
                  _builder_1.newLineIfNotEmpty();
                } else {
                  if ((this.robotsList.get(i_1).get((j_1).intValue()).indentation == 2)) {
                    _builder_1.newLine();
                    _builder_1.append("\t\t");
                    _builder_1.append(this.robotsList.get(i_1).get((j_1).intValue()).name, "\t\t");
                    _builder_1.append(missions = this.robotsList.get(i_1).get((j_1).intValue()).missionList, "\t\t");
                    _builder_1.newLineIfNotEmpty();
                  } else {
                    if ((this.robotsList.get(i_1).get((j_1).intValue()).indentation == 3)) {
                      _builder_1.newLine();
                      _builder_1.append("\t\t\t");
                      _builder_1.append(this.robotsList.get(i_1).get((j_1).intValue()).name, "\t\t\t");
                      _builder_1.append(missions = this.robotsList.get(i_1).get((j_1).intValue()).missionList, "\t\t\t");
                      _builder_1.newLineIfNotEmpty();
                    } else {
                      if ((this.robotsList.get(i_1).get((j_1).intValue()).indentation == 4)) {
                        _builder_1.newLine();
                        _builder_1.append("\t\t\t\t");
                        _builder_1.append(this.robotsList.get(i_1).get((j_1).intValue()).name, "\t\t\t\t");
                        _builder_1.append(missions = this.robotsList.get(i_1).get((j_1).intValue()).missionList, "\t\t\t\t");
                        _builder_1.newLineIfNotEmpty();
                      } else {
                        if ((this.robotsList.get(i_1).get((j_1).intValue()).indentation == 5)) {
                          _builder_1.newLine();
                          _builder_1.append("\t\t\t\t\t");
                          _builder_1.append(this.robotsList.get(i_1).get((j_1).intValue()).name, "\t\t\t\t\t");
                          _builder_1.append(missions = this.robotsList.get(i_1).get((j_1).intValue()).missionList, "\t\t\t\t\t");
                          _builder_1.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        fsa.generateFile(_plus_1, _builder_1);
        String _get_3 = this.availableRobots.get(i_1);
        String _plus_2 = ("readme_mission_" + _get_3);
        String _plus_3 = (_plus_2 + ".txt");
        StringConcatenation _builder_2 = new StringConcatenation();
        String _get_4 = this.textarray.get(i_1);
        _builder_2.append(_get_4);
        _builder_2.newLineIfNotEmpty();
        fsa.generateFile(_plus_3, _builder_2);
        InputOutput.<String>println(this.textarray.get(i_1));
      }
    }
  }
  
  public Object nestedMethod(final CompositionOperator in, final int index, final int suboperator, final int robot, final int indentation, final String parent) {
    return this.doLogic(in.getInputOperators().get(suboperator), index, robot, indentation, parent, "");
  }
  
  protected Object _doLogic(final SequenceOp in, final int index, final int robot, final int indentation, final String parent, final String hybrid) {
    ArrayList<String> names = new ArrayList<String>();
    int counter = 0;
    boolean _isEmpty = this.robotsList.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      for (counter = 0; (counter < ((Object[])Conversions.unwrapArray(this.robotsList.get(robot), Object.class)).length); counter++) {
        names.add(this.robotsList.get(robot).get(counter).name);
      }
    }
    int _length = in.getInputOperators().toArray().length;
    ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _length, true);
    for (final Integer i : _doubleDotLessThan) {
      {
        if (((i).intValue() > 0)) {
          this.text = (this.text + " and ");
        }
        this.nestedMethod(in, index, (i).intValue(), robot, indentation, parent);
      }
    }
    return null;
  }
  
  protected Object _doLogic(final ParallelOp in, final int index, final int robot, final int indentation, final String parent, final String hybrid) {
    String _get = this.availableRobots.get(robot);
    String _plus = ("Robot " + _get);
    String _plus_1 = (_plus + " does ");
    this.text = _plus_1;
    this.nestedMethod(in, index, 0, robot, indentation, this.availableRobots.get(robot));
    this.textarray.add(this.text);
    ArrayList<ArrayList<String>> names = new ArrayList<ArrayList<String>>();
    ArrayList<Integer> counter = new ArrayList<Integer>();
    boolean _isEmpty = this.robotsList.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      for (int i = 0; (i < ((Object[])Conversions.unwrapArray(this.robotsList, Object.class)).length); i++) {
        {
          counter.add(Integer.valueOf(0));
          ArrayList<String> _arrayList = new ArrayList<String>();
          names.add(_arrayList);
          for (int j = 0; (j < ((Object[])Conversions.unwrapArray(this.robotsList.get(i), Object.class)).length); j++) {
            {
              counter.add(i, Integer.valueOf(j));
              names.get((robot + i)).add(this.robotsList.get((robot + i)).get((counter.get(j)).intValue()).name);
            }
          }
        }
      }
    }
    int _length = ((Object[])Conversions.unwrapArray(in.getInputOperators(), Object.class)).length;
    boolean _greaterThan = (_length > 0);
    if (_greaterThan) {
      int _length_1 = ((Object[])Conversions.unwrapArray(in.getInputOperators(), Object.class)).length;
      ExclusiveRange _doubleDotLessThan = new ExclusiveRange(1, _length_1, true);
      for (final Integer i : _doubleDotLessThan) {
        {
          ArrayList<robotClass> _get_1 = this.robotsList.get((robot + (i).intValue()));
          String _get_2 = this.availableRobots.get((robot + (i).intValue()));
          ArrayList<String> _arrayList = new ArrayList<String>();
          robotClass _robotClass = new robotClass(_get_2, _arrayList, indentation);
          _get_1.add(_robotClass);
          names.get((robot + (i).intValue())).add(this.robotsList.get((robot + (i).intValue())).get(0).name);
          String _get_3 = this.availableRobots.get((robot + (i).intValue()));
          String _plus_2 = ("Robot " + _get_3);
          String _plus_3 = (_plus_2 + " does ");
          this.text = _plus_3;
          this.nestedMethod(in, names.get((i).intValue()).indexOf(this.availableRobots.get((robot + (i).intValue()))), (i).intValue(), (robot + (i).intValue()), indentation, this.availableRobots.get((robot + (i).intValue())));
          this.textarray.add(this.text);
        }
      }
    }
    return null;
  }
  
  protected Object _doLogic(final EventHandlerOp in, final int index, final int robot, final int indentation, final String parent, final String hybrid) {
    this.text = (this.text + "by default ");
    this.robotsList.get(robot).get(index).missionList.add("eh");
    int counter = ((Object[])Conversions.unwrapArray(this.robotsList.get(robot), Object.class)).length;
    ArrayList<robotClass> _get = this.robotsList.get(robot);
    ArrayList<String> _arrayList = new ArrayList<String>();
    robotClass _robotClass = new robotClass("eh_default", _arrayList, (indentation + 1));
    _get.add(_robotClass);
    this.nestedMethod(in, counter, 0, robot, (indentation + 1), "eh_default");
    for (int i = 1; (i < ((Object[])Conversions.unwrapArray(in.getInputOperators(), Object.class)).length); i++) {
      {
        counter = ((Object[])Conversions.unwrapArray(this.robotsList.get(robot), Object.class)).length;
        ArrayList<robotClass> _get_1 = this.robotsList.get(robot);
        String _name = in.getInputOperators().get(i).getAffectingEvent().get(0).getName();
        String _plus = ("eh_" + _name);
        ArrayList<String> _arrayList_1 = new ArrayList<String>();
        robotClass _robotClass_1 = new robotClass(_plus, _arrayList_1, (indentation + 1));
        _get_1.add(_robotClass_1);
        String _name_1 = in.getInputOperators().get(i).getAffectingEvent().get(0).getName();
        String _plus_1 = ((this.text + ", and if event ") + _name_1);
        String _plus_2 = (_plus_1 + " occurs, it will ");
        this.text = _plus_2;
        String _name_2 = in.getInputOperators().get(i).getAffectingEvent().get(0).getName();
        String _plus_3 = ("eh_" + _name_2);
        this.nestedMethod(in, counter, i, robot, (indentation + 1), _plus_3);
      }
    }
    return null;
  }
  
  protected Object _doLogic(final FallBackOp in, final int index, final int robot, final int indentation, final String parent, final String hybrid) {
    this.robotsList.get(robot).get(index).missionList.add("fb");
    int counter = ((Object[])Conversions.unwrapArray(this.robotsList.get(robot), Object.class)).length;
    for (int i = 1; (i <= ((Object[])Conversions.unwrapArray(in.getInputOperators(), Object.class)).length); i++) {
      {
        counter = ((Object[])Conversions.unwrapArray(this.robotsList.get(robot), Object.class)).length;
        ArrayList<robotClass> _get = this.robotsList.get(robot);
        ArrayList<String> _arrayList = new ArrayList<String>();
        robotClass _robotClass = new robotClass(("fb_" + Integer.valueOf(i)), _arrayList, (indentation + 1));
        _get.add(_robotClass);
        if ((i > 1)) {
          this.text = (this.text + "if it fails, it tries to ");
        }
        int _plusPlus = counter++;
        this.nestedMethod(in, _plusPlus, (i - 1), robot, (indentation + 1), ("fb_" + Integer.valueOf(i)));
      }
    }
    return null;
  }
  
  protected Object _doLogic(final ConditionOp in, final int index, final int robot, final int indentation, final String parent, final String hybrid) {
    this.robotsList.get(robot).get(index).missionList.add("cond");
    int counter = ((Object[])Conversions.unwrapArray(this.robotsList.get(robot), Object.class)).length;
    for (int i = 1; (i <= ((Object[])Conversions.unwrapArray(in.getInputOperators(), Object.class)).length); i++) {
      {
        counter = ((Object[])Conversions.unwrapArray(this.robotsList.get(robot), Object.class)).length;
        ArrayList<robotClass> _get = this.robotsList.get(robot);
        String _name = in.getInputOperators().get(i).getAffectingEvent().get(0).getName();
        String _plus = ("cond_" + _name);
        ArrayList<String> _arrayList = new ArrayList<String>();
        robotClass _robotClass = new robotClass(_plus, _arrayList, (indentation + 1));
        _get.add(_robotClass);
        String _name_1 = in.getInputOperators().get(i).getAffectingEvent().get(0).getName();
        String _plus_1 = ((this.text + "if event") + _name_1);
        String _plus_2 = (_plus_1 + " holds, it will ");
        this.text = _plus_2;
        String _name_2 = in.getInputOperators().get(i).getAffectingEvent().get(0).getName();
        String _plus_3 = ("cond_" + _name_2);
        this.nestedMethod(in, counter, (i - 1), robot, (indentation + 1), _plus_3);
      }
    }
    return null;
  }
  
  protected Object _doLogic(final ANDOp in, final int index, final int robot, final int indentation, final String parent, final String hybrid) {
    Object _xblockexpression = null;
    {
      this.doLogic(in.getInputOperators().get(0), index, robot, indentation, parent, "and_left");
      this.text = (this.text + " and ");
      _xblockexpression = this.doLogic(in.getInputOperators().get(1), index, robot, indentation, parent, "right");
    }
    return _xblockexpression;
  }
  
  protected Object _doLogic(final OROp in, final int index, final int robot, final int indentation, final String parent, final String hybrid) {
    Object _xblockexpression = null;
    {
      this.doLogic(in.getInputOperators().get(0), index, robot, indentation, parent, "or_left");
      this.text = (this.text + " or ");
      _xblockexpression = this.doLogic(in.getInputOperators().get(1), index, robot, indentation, parent, "right");
    }
    return _xblockexpression;
  }
  
  protected Object _doLogic(final DelegateOp in, final int index, final int robot, final int indentation, final String parent, final String hybrid) {
    Object _xblockexpression = null;
    {
      String _name = in.getPattern().eClass().getName();
      boolean _equals = Objects.equal(_name, "Visit");
      if (_equals) {
        String _name_1 = in.getInputLocations().get(0).getName();
        String _plus = ("<> (" + _name_1);
        String _plus_1 = (_plus + ")");
        this.template = _plus_1;
        String _name_2 = in.getInputLocations().get(0).getName();
        String _plus_2 = ((this.text + " visit (without any specific order) locations ") + _name_2);
        this.text = _plus_2;
        for (int i = 1; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
          {
            String _name_3 = in.getInputLocations().get(i).getName();
            String _plus_3 = ((this.template + " && <> (") + _name_3);
            String _plus_4 = (_plus_3 + ")");
            this.template = _plus_4;
            String _name_4 = in.getInputLocations().get(i).getName();
            String _plus_5 = ((this.text + ", ") + _name_4);
            this.text = _plus_5;
          }
        }
      } else {
        String _name_3 = in.getPattern().eClass().getName();
        boolean _equals_1 = Objects.equal(_name_3, "FairVisit");
        if (_equals_1) {
          String _name_4 = in.getInputLocations().get(0).getName();
          String _plus_3 = ("<> (" + _name_4);
          String _plus_4 = (_plus_3 + ")");
          this.template = _plus_4;
          this.text = (this.text + "visit (without any specific order) locations ");
          for (int j = 0; (j < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); j++) {
            if ((j == 0)) {
              for (int i = 1; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                String _name_5 = in.getInputLocations().get(i).getName();
                String _plus_5 = ((this.template + " && <> (") + _name_5);
                String _plus_6 = (_plus_5 + ")");
                this.template = _plus_6;
              }
              String _name_5 = in.getInputLocations().get(j).getName();
              String _plus_5 = ((this.template + " && [] ((") + _name_5);
              String _plus_6 = (_plus_5 + ") -> X ((!");
              String _name_6 = in.getInputLocations().get(j).getName();
              String _plus_7 = (_plus_6 + _name_6);
              String _plus_8 = (_plus_7 + ") U (");
              String _name_7 = in.getInputLocations().get((j + 1)).getName();
              String _plus_9 = (_plus_8 + _name_7);
              String _plus_10 = (_plus_9 + ") || ([] (!");
              String _name_8 = in.getInputLocations().get(j).getName();
              String _plus_11 = (_plus_10 + _name_8);
              String _plus_12 = (_plus_11 + "))))");
              this.template = _plus_12;
              for (int i = 2; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                String _name_9 = in.getInputLocations().get(j).getName();
                String _plus_13 = ((this.template + " && ((!") + _name_9);
                String _plus_14 = (_plus_13 + ") U (");
                String _name_10 = in.getInputLocations().get((j + 1)).getName();
                String _plus_15 = (_plus_14 + _name_10);
                String _plus_16 = (_plus_15 + ") || ([] (!");
                String _name_11 = in.getInputLocations().get(j).getName();
                String _plus_17 = (_plus_16 + _name_11);
                String _plus_18 = (_plus_17 + ")))");
                this.template = _plus_18;
              }
              String _name_9 = in.getInputLocations().get(j).getName();
              String _plus_13 = (this.text + _name_9);
              this.text = _plus_13;
            } else {
              String _name_10 = in.getInputLocations().get(j).getName();
              String _plus_14 = ((this.template + " && [] ((") + _name_10);
              String _plus_15 = (_plus_14 + ") -> X ((!");
              String _name_11 = in.getInputLocations().get(j).getName();
              String _plus_16 = (_plus_15 + _name_11);
              String _plus_17 = (_plus_16 + ") U (");
              String _name_12 = in.getInputLocations().get(0).getName();
              String _plus_18 = (_plus_17 + _name_12);
              String _plus_19 = (_plus_18 + ") || ([] (!");
              String _name_13 = in.getInputLocations().get(j).getName();
              String _plus_20 = (_plus_19 + _name_13);
              String _plus_21 = (_plus_20 + "))))");
              this.template = _plus_21;
              for (int i = 1; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                if ((i != j)) {
                  String _name_14 = in.getInputLocations().get(j).getName();
                  String _plus_22 = ((this.template + " && ((!") + _name_14);
                  String _plus_23 = (_plus_22 + ") U (");
                  String _name_15 = in.getInputLocations().get(i).getName();
                  String _plus_24 = (_plus_23 + _name_15);
                  String _plus_25 = (_plus_24 + ") || ([] (!");
                  String _name_16 = in.getInputLocations().get(j).getName();
                  String _plus_26 = (_plus_25 + _name_16);
                  String _plus_27 = (_plus_26 + ")))");
                  this.template = _plus_27;
                }
              }
              String _name_14 = in.getInputLocations().get(j).getName();
              String _plus_22 = ((this.text + ", ") + _name_14);
              this.text = _plus_22;
            }
          }
          this.text = (this.text + "the same number of times");
        } else {
          String _name_5 = in.getPattern().eClass().getName();
          boolean _equals_2 = Objects.equal(_name_5, "OrderderVisit");
          if (_equals_2) {
            String _name_6 = in.getInputLocations().get(0).getName();
            String _plus_5 = ("(<> (" + _name_6);
            String _plus_6 = (_plus_5 + ")");
            this.template = _plus_6;
            this.text = (this.text + "visit (with a specific order) locations ");
            for (int i = 1; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
              String _name_7 = in.getInputLocations().get(i).getName();
              String _plus_7 = ((this.template + " && <> ((") + _name_7);
              String _plus_8 = (_plus_7 + ")");
              this.template = _plus_8;
            }
            for (int i = 0; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
              {
                this.template = (this.template + ")");
                String _name_7 = in.getInputLocations().get(i).getName();
                String _plus_7 = (this.text + _name_7);
                String _plus_8 = (_plus_7 + ", ");
                this.text = _plus_8;
              }
            }
            for (int j = (((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length - 1); (j > 0); j--) {
              for (int i = (j - 1); (i >= 0); i--) {
                String _name_7 = in.getInputLocations().get(j).getName();
                String _plus_7 = ((this.template + " && ((!") + _name_7);
                String _plus_8 = (_plus_7 + ") U (");
                String _name_8 = in.getInputLocations().get(i).getName();
                String _plus_9 = (_plus_8 + _name_8);
                String _plus_10 = (_plus_9 + "))");
                this.template = _plus_10;
              }
            }
          } else {
            String _name_7 = in.getPattern().eClass().getName();
            boolean _equals_3 = Objects.equal(_name_7, "SequencedVisit");
            if (_equals_3) {
              String _name_8 = in.getInputLocations().get(0).getName();
              String _plus_7 = ("<> ((" + _name_8);
              String _plus_8 = (_plus_7 + ")");
              this.template = _plus_8;
              this.text = (this.text + "visit in sequence locations ");
              for (int i = 1; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                String _name_9 = in.getInputLocations().get(i).getName();
                String _plus_9 = ((this.template + " && (<> (") + _name_9);
                String _plus_10 = (_plus_9 + ")");
                this.template = _plus_10;
              }
              for (int i = 0; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                {
                  this.template = (this.template + ")");
                  String _name_9 = in.getInputLocations().get(i).getName();
                  String _plus_9 = (this.text + _name_9);
                  String _plus_10 = (_plus_9 + ", ");
                  this.text = _plus_10;
                }
              }
            } else {
              String _name_9 = in.getPattern().eClass().getName();
              boolean _equals_4 = Objects.equal(_name_9, "StrictOrderedVisit");
              if (_equals_4) {
                String _name_10 = in.getInputLocations().get(0).getName();
                String _plus_9 = ("<> ((" + _name_10);
                String _plus_10 = (_plus_9 + ")");
                this.template = _plus_10;
                String _name_11 = in.getInputLocations().get(0).getName();
                String _plus_11 = ((this.text + "visit (with a strict order) locations ") + _name_11);
                this.text = _plus_11;
                for (int i = 1; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                  {
                    String _name_12 = in.getInputLocations().get(i).getName();
                    String _plus_12 = ((this.template + " && <> (") + _name_12);
                    String _plus_13 = (_plus_12 + ")");
                    this.template = _plus_13;
                    String _name_13 = in.getInputLocations().get(i).getName();
                    String _plus_14 = ((this.text + ", ") + _name_13);
                    this.text = _plus_14;
                  }
                }
                this.template = (this.template + ")");
                for (int j = (((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length - 1); (j >= 0); j--) {
                  for (int i = (((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length - 1); (i >= 0); i--) {
                    if ((i != j)) {
                      String _name_12 = in.getInputLocations().get(j).getName();
                      String _plus_12 = ((this.template + " && ((!") + _name_12);
                      String _plus_13 = (_plus_12 + ") U (");
                      String _name_13 = in.getInputLocations().get(i).getName();
                      String _plus_14 = (_plus_13 + _name_13);
                      String _plus_15 = (_plus_14 + "))");
                      this.template = _plus_15;
                    }
                  }
                }
                for (int j = (((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length - 1); (j > 0); j--) {
                  for (int i = (j - 1); (i >= 0); i--) {
                    if ((i != j)) {
                      String _name_12 = in.getInputLocations().get(j).getName();
                      String _plus_12 = ((this.template + " && <> (") + _name_12);
                      String _plus_13 = (_plus_12 + " && X(((! ");
                      String _name_13 = in.getInputLocations().get(j).getName();
                      String _plus_14 = (_plus_13 + _name_13);
                      String _plus_15 = (_plus_14 + ")) U ");
                      String _name_14 = in.getInputLocations().get(i).getName();
                      String _plus_16 = (_plus_15 + _name_14);
                      String _plus_17 = (_plus_16 + "))");
                      this.template = _plus_17;
                    }
                  }
                }
              } else {
                String _name_12 = in.getPattern().eClass().getName();
                boolean _equals_5 = Objects.equal(_name_12, "Patrolling");
                if (_equals_5) {
                  String _name_13 = in.getInputLocations().get(0).getName();
                  String _plus_12 = ("[] (<> (" + _name_13);
                  String _plus_13 = (_plus_12 + ")");
                  this.template = _plus_13;
                  String _name_14 = in.getInputLocations().get(0).getName();
                  String _plus_14 = ((this.text + "patrol locations ") + _name_14);
                  this.text = _plus_14;
                  for (int i = 1; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                    {
                      String _name_15 = in.getInputLocations().get(i).getName();
                      String _plus_15 = ((this.template + " && <> (") + _name_15);
                      String _plus_16 = (_plus_15 + ")");
                      this.template = _plus_16;
                      String _name_16 = in.getInputLocations().get(i).getName();
                      String _plus_17 = ((this.text + ", ") + _name_16);
                      this.text = _plus_17;
                    }
                  }
                  this.template = (this.template + ")");
                } else {
                  String _name_15 = in.getPattern().eClass().getName();
                  boolean _equals_6 = Objects.equal(_name_15, "FairPatrolling");
                  if (_equals_6) {
                    String _name_16 = in.getInputLocations().get(0).getName();
                    String _plus_15 = ("[] (<> (" + _name_16);
                    String _plus_16 = (_plus_15 + ")");
                    this.template = _plus_16;
                    this.text = (this.text + " patrol (without any specific order) locations ");
                    for (int j = 0; (j < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); j++) {
                      if ((j == 0)) {
                        for (int i = 1; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                          String _name_17 = in.getInputLocations().get(i).getName();
                          String _plus_17 = ((this.template + " && <> (") + _name_17);
                          String _plus_18 = (_plus_17 + ")");
                          this.template = _plus_18;
                        }
                        String _name_17 = in.getInputLocations().get(j).getName();
                        String _plus_17 = ((this.template + ") && [] ((") + _name_17);
                        String _plus_18 = (_plus_17 + ") -> X ((!");
                        String _name_18 = in.getInputLocations().get(j).getName();
                        String _plus_19 = (_plus_18 + _name_18);
                        String _plus_20 = (_plus_19 + ") U (");
                        String _name_19 = in.getInputLocations().get((j + 1)).getName();
                        String _plus_21 = (_plus_20 + _name_19);
                        String _plus_22 = (_plus_21 + "))");
                        this.template = _plus_22;
                        for (int i = 2; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                          String _name_20 = in.getInputLocations().get(j).getName();
                          String _plus_23 = ((this.template + " && ((!") + _name_20);
                          String _plus_24 = (_plus_23 + ") U (");
                          String _name_21 = in.getInputLocations().get(i).getName();
                          String _plus_25 = (_plus_24 + _name_21);
                          String _plus_26 = (_plus_25 + "))");
                          this.template = _plus_26;
                        }
                        this.template = (this.template + ")");
                        String _name_20 = in.getInputLocations().get(j).getName();
                        String _plus_23 = (this.text + _name_20);
                        this.text = _plus_23;
                      } else {
                        String _name_21 = in.getInputLocations().get(j).getName();
                        String _plus_24 = ((this.template + " && [] ((") + _name_21);
                        String _plus_25 = (_plus_24 + ") -> X ((!");
                        String _name_22 = in.getInputLocations().get(j).getName();
                        String _plus_26 = (_plus_25 + _name_22);
                        String _plus_27 = (_plus_26 + ") U (");
                        String _name_23 = in.getInputLocations().get(0).getName();
                        String _plus_28 = (_plus_27 + _name_23);
                        String _plus_29 = (_plus_28 + "))");
                        this.template = _plus_29;
                        String _name_24 = in.getInputLocations().get(j).getName();
                        String _plus_30 = ((this.text + ", ") + _name_24);
                        this.text = _plus_30;
                        for (int i = 1; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                          if ((i != j)) {
                            String _name_25 = in.getInputLocations().get(j).getName();
                            String _plus_31 = ((this.template + " && ((!") + _name_25);
                            String _plus_32 = (_plus_31 + ") U (");
                            String _name_26 = in.getInputLocations().get(i).getName();
                            String _plus_33 = (_plus_32 + _name_26);
                            String _plus_34 = (_plus_33 + "))");
                            this.template = _plus_34;
                          }
                        }
                      }
                    }
                    this.template = (this.template + ")");
                    this.text = (this.text + "the same number of times");
                  } else {
                    String _name_17 = in.getPattern().eClass().getName();
                    boolean _equals_7 = Objects.equal(_name_17, "OrderedPatrolling");
                    if (_equals_7) {
                      String _name_18 = in.getInputLocations().get(0).getName();
                      String _plus_17 = ("[] (<> ((" + _name_18);
                      String _plus_18 = (_plus_17 + ")");
                      this.template = _plus_18;
                      this.text = (this.text + "patrol (with a specific order) locations ");
                      for (int i = 1; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                        String _name_19 = in.getInputLocations().get(i).getName();
                        String _plus_19 = ((this.template + " && <> ((") + _name_19);
                        String _plus_20 = (_plus_19 + ")");
                        this.template = _plus_20;
                      }
                      for (int i = 0; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                        {
                          this.template = (this.template + ")");
                          String _name_19 = in.getInputLocations().get(i).getName();
                          String _plus_19 = (this.text + _name_19);
                          String _plus_20 = (_plus_19 + ", ");
                          this.text = _plus_20;
                        }
                      }
                      for (int j = (((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length - 1); (j > 0); j--) {
                        for (int i = (j - 1); (i >= 0); i--) {
                          String _name_19 = in.getInputLocations().get(j).getName();
                          String _plus_19 = ((this.template + " && (! (") + _name_19);
                          String _plus_20 = (_plus_19 + ") U (");
                          String _name_20 = in.getInputLocations().get(i).getName();
                          String _plus_21 = (_plus_20 + _name_20);
                          String _plus_22 = (_plus_21 + "))");
                          this.template = _plus_22;
                        }
                      }
                      for (int j = (((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length - 1); (j > 0); j--) {
                        for (int i = (j - 1); (i >= 0); i--) {
                          String _name_19 = in.getInputLocations().get(j).getName();
                          String _plus_19 = ((this.template + " && [] (") + _name_19);
                          String _plus_20 = (_plus_19 + " -> X((! ");
                          String _name_20 = in.getInputLocations().get(j).getName();
                          String _plus_21 = (_plus_20 + _name_20);
                          String _plus_22 = (_plus_21 + ") U ");
                          String _name_21 = in.getInputLocations().get(i).getName();
                          String _plus_23 = (_plus_22 + _name_21);
                          String _plus_24 = (_plus_23 + "))");
                          this.template = _plus_24;
                        }
                      }
                    } else {
                      String _name_19 = in.getPattern().eClass().getName();
                      boolean _equals_8 = Objects.equal(_name_19, "StrictOreredPatrolling");
                      if (_equals_8) {
                        String _name_20 = in.getInputLocations().get(0).getName();
                        String _plus_19 = ("[] (<> ((" + _name_20);
                        String _plus_20 = (_plus_19 + ")");
                        this.template = _plus_20;
                        String _name_21 = in.getInputLocations().get(0).getName();
                        String _plus_21 = ((this.text + "patrol (with a strict order) locations ") + _name_21);
                        this.text = _plus_21;
                        for (int i = 1; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                          {
                            String _name_22 = in.getInputLocations().get(i).getName();
                            String _plus_22 = ((this.template + " && <> ((") + _name_22);
                            String _plus_23 = (_plus_22 + ")");
                            this.template = _plus_23;
                            String _name_23 = in.getInputLocations().get(i).getName();
                            String _plus_24 = ((this.text + ", ") + _name_23);
                            this.text = _plus_24;
                          }
                        }
                        for (int i = 0; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                          this.template = (this.template + ")");
                        }
                        for (int j = (((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length - 1); (j >= 0); j--) {
                          for (int i = (((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length - 1); (i >= 0); i--) {
                            if ((i != j)) {
                              String _name_22 = in.getInputLocations().get(j).getName();
                              String _plus_22 = ((this.template + " && ((!") + _name_22);
                              String _plus_23 = (_plus_22 + ") U (");
                              String _name_23 = in.getInputLocations().get(i).getName();
                              String _plus_24 = (_plus_23 + _name_23);
                              String _plus_25 = (_plus_24 + "))");
                              this.template = _plus_25;
                            }
                          }
                        }
                        for (int j = (((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length - 1); (j > 0); j--) {
                          for (int i = (j - 1); (i >= 0); i--) {
                            if ((i != j)) {
                              String _name_22 = in.getInputLocations().get(j).getName();
                              String _plus_22 = ((this.template + " && [] (") + _name_22);
                              String _plus_23 = (_plus_22 + " -> X((! ");
                              String _name_23 = in.getInputLocations().get(j).getName();
                              String _plus_24 = (_plus_23 + _name_23);
                              String _plus_25 = (_plus_24 + ")) U ");
                              String _name_24 = in.getInputLocations().get(i).getName();
                              String _plus_26 = (_plus_25 + _name_24);
                              String _plus_27 = (_plus_26 + "))");
                              this.template = _plus_27;
                            }
                          }
                        }
                      } else {
                        String _name_22 = in.getPattern().eClass().getName();
                        boolean _equals_9 = Objects.equal(_name_22, "SequencedPatrolling");
                        if (_equals_9) {
                          String _name_23 = in.getInputLocations().get(0).getName();
                          String _plus_22 = ("[] (<> ((" + _name_23);
                          String _plus_23 = (_plus_22 + ")");
                          this.template = _plus_23;
                          String _name_24 = in.getInputLocations().get(0).getName();
                          String _plus_24 = ((this.text + "patrol in sequence locations ") + _name_24);
                          this.text = _plus_24;
                          for (int i = 1; (i < ((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length); i++) {
                            {
                              String _name_25 = in.getInputLocations().get(i).getName();
                              String _plus_25 = ((this.template + " && <> ((") + _name_25);
                              String _plus_26 = (_plus_25 + ")");
                              this.template = _plus_26;
                              String _name_26 = in.getInputLocations().get(i).getName();
                              String _plus_27 = ((this.text + ", ") + _name_26);
                              this.text = _plus_27;
                            }
                          }
                          for (int i = 0; (i < ((((Object[])Conversions.unwrapArray(in.getInputLocations(), Object.class)).length * 2) - 1)); i++) {
                            this.template = (this.template + ")");
                          }
                        } else {
                          String _name_25 = in.getPattern().eClass().getName();
                          boolean _equals_10 = Objects.equal(_name_25, "ExactRestrictedAvoidance");
                          if (_equals_10) {
                            boolean _isEmpty = in.getInputAction().isEmpty();
                            if (_isEmpty) {
                              String _name_26 = in.getInputLocations().get(0).getName();
                              String _plus_25 = ("(! (" + _name_26);
                              String _plus_26 = (_plus_25 + ")) U (");
                              String _name_27 = in.getInputLocations().get(0).getName();
                              String _plus_27 = (_plus_26 + _name_27);
                              String _plus_28 = (_plus_27 + " && (X ((! ");
                              String _name_28 = in.getInputLocations().get(0).getName();
                              String _plus_29 = (_plus_28 + _name_28);
                              String _plus_30 = (_plus_29 + ") U (");
                              String _name_29 = in.getInputLocations().get(0).getName();
                              String _plus_31 = (_plus_30 + _name_29);
                              String _plus_32 = (_plus_31 + " && (X ((! ");
                              String _name_30 = in.getInputLocations().get(0).getName();
                              String _plus_33 = (_plus_32 + _name_30);
                              String _plus_34 = (_plus_33 + ") U (");
                              String _name_31 = in.getInputLocations().get(0).getName();
                              String _plus_35 = (_plus_34 + _name_31);
                              String _plus_36 = (_plus_35 + " && (X ([] (!  ");
                              String _name_32 = in.getInputLocations().get(0).getName();
                              String _plus_37 = (_plus_36 + _name_32);
                              String _plus_38 = (_plus_37 + "))))))))))");
                              this.template = _plus_38;
                              String _name_33 = in.getInputLocations().get(0).getName();
                              String _plus_39 = ((this.text + "visit location ") + _name_33);
                              String _plus_40 = (_plus_39 + " an exact number of times");
                              this.text = _plus_40;
                            } else {
                              boolean _isEmpty_1 = in.getInputLocations().isEmpty();
                              if (_isEmpty_1) {
                                String _description = in.getInputAction().get(0).getDescription();
                                String _plus_41 = ("(! (" + _description);
                                String _plus_42 = (_plus_41 + ")) U (");
                                String _description_1 = in.getInputAction().get(0).getDescription();
                                String _plus_43 = (_plus_42 + _description_1);
                                String _plus_44 = (_plus_43 + " && (X ((! ");
                                String _description_2 = in.getInputAction().get(0).getDescription();
                                String _plus_45 = (_plus_44 + _description_2);
                                String _plus_46 = (_plus_45 + ") U (");
                                String _description_3 = in.getInputAction().get(0).getDescription();
                                String _plus_47 = (_plus_46 + _description_3);
                                String _plus_48 = (_plus_47 + " && (X ((! ");
                                String _description_4 = in.getInputAction().get(0).getDescription();
                                String _plus_49 = (_plus_48 + _description_4);
                                String _plus_50 = (_plus_49 + ") U (");
                                String _description_5 = in.getInputAction().get(0).getDescription();
                                String _plus_51 = (_plus_50 + _description_5);
                                String _plus_52 = (_plus_51 + " && (X ([] (!  ");
                                String _description_6 = in.getInputAction().get(0).getDescription();
                                String _plus_53 = (_plus_52 + _description_6);
                                String _plus_54 = (_plus_53 + "))))))))))");
                                this.template = _plus_54;
                                String _description_7 = in.getInputAction().get(0).getDescription();
                                String _plus_55 = ((this.text + "perform ") + _description_7);
                                String _plus_56 = (_plus_55 + " an exact number of times");
                                this.text = _plus_56;
                              }
                            }
                          } else {
                            String _name_34 = in.getPattern().eClass().getName();
                            boolean _equals_11 = Objects.equal(_name_34, "FutureAvoidance");
                            if (_equals_11) {
                              boolean _isEmpty_2 = in.getInputAction().isEmpty();
                              if (_isEmpty_2) {
                                String _description_8 = in.getAffectingEvent().get(0).getDescription();
                                String _plus_57 = ("[] ((" + _description_8);
                                String _plus_58 = (_plus_57 + "-> ([] ! (");
                                String _name_35 = in.getInputLocations().get(0).getName();
                                String _plus_59 = (_plus_58 + _name_35);
                                String _plus_60 = (_plus_59 + "))");
                                this.template = _plus_60;
                                String _name_36 = in.getInputLocations().get(0).getName();
                                String _plus_61 = ((this.text + "avoid location ") + _name_36);
                                String _plus_62 = (_plus_61 + " if ");
                                String _description_9 = in.getAffectingEvent().get(0).getDescription();
                                String _plus_63 = (_plus_62 + _description_9);
                                String _plus_64 = (_plus_63 + " occurs");
                                this.text = _plus_64;
                              } else {
                                boolean _isEmpty_3 = in.getInputLocations().isEmpty();
                                if (_isEmpty_3) {
                                  String _description_10 = in.getAffectingEvent().get(0).getDescription();
                                  String _plus_65 = ("[] ((" + _description_10);
                                  String _plus_66 = (_plus_65 + "-> ([] ! (");
                                  String _description_11 = in.getInputAction().get(0).getDescription();
                                  String _plus_67 = (_plus_66 + _description_11);
                                  String _plus_68 = (_plus_67 + "))");
                                  this.template = _plus_68;
                                  String _description_12 = in.getInputAction().get(0).getDescription();
                                  String _plus_69 = ((this.text + "avoid action ") + _description_12);
                                  String _plus_70 = (_plus_69 + " if ");
                                  String _description_13 = in.getAffectingEvent().get(0).getDescription();
                                  String _plus_71 = (_plus_70 + _description_13);
                                  String _plus_72 = (_plus_71 + " occurs");
                                  this.text = _plus_72;
                                }
                              }
                            } else {
                              String _name_37 = in.getPattern().eClass().getName();
                              boolean _equals_12 = Objects.equal(_name_37, "GlobalAvoidance");
                              if (_equals_12) {
                                boolean _isEmpty_4 = in.getInputAction().isEmpty();
                                if (_isEmpty_4) {
                                  String _name_38 = in.getInputLocations().get(0).getName();
                                  String _plus_73 = ("[] (! (" + _name_38);
                                  String _plus_74 = (_plus_73 + "))");
                                  this.template = _plus_74;
                                  String _name_39 = in.getInputLocations().get(0).getName();
                                  String _plus_75 = ((this.text + "avoid location ") + _name_39);
                                  this.text = _plus_75;
                                } else {
                                  boolean _isEmpty_5 = in.getInputLocations().isEmpty();
                                  if (_isEmpty_5) {
                                    String _description_14 = in.getInputAction().get(0).getDescription();
                                    String _plus_76 = ("[] (! (" + _description_14);
                                    String _plus_77 = (_plus_76 + "))");
                                    this.template = _plus_77;
                                    String _description_15 = in.getInputAction().get(0).getDescription();
                                    String _plus_78 = ((this.text + "avoid action ") + _description_15);
                                    this.text = _plus_78;
                                  }
                                }
                              } else {
                                String _name_40 = in.getPattern().eClass().getName();
                                boolean _equals_13 = Objects.equal(_name_40, "LowerRestricedAvoidance");
                                if (_equals_13) {
                                  boolean _isEmpty_6 = in.getInputAction().isEmpty();
                                  if (_isEmpty_6) {
                                    String _name_41 = in.getInputLocations().get(0).getName();
                                    String _plus_79 = ("<> ((" + _name_41);
                                    String _plus_80 = (_plus_79 + ") && X (<>((");
                                    String _name_42 = in.getInputLocations().get(0).getName();
                                    String _plus_81 = (_plus_80 + _name_42);
                                    String _plus_82 = (_plus_81 + ") && X <>( (");
                                    String _name_43 = in.getInputLocations().get(0).getName();
                                    String _plus_83 = (_plus_82 + _name_43);
                                    String _plus_84 = (_plus_83 + ")))))");
                                    this.template = _plus_84;
                                    String _name_44 = in.getInputLocations().get(0).getName();
                                    String _plus_85 = ((this.text + "visit location ") + _name_44);
                                    String _plus_86 = (_plus_85 + " at least N times");
                                    this.text = _plus_86;
                                  } else {
                                    boolean _isEmpty_7 = in.getInputLocations().isEmpty();
                                    if (_isEmpty_7) {
                                      String _description_16 = in.getInputAction().get(0).getDescription();
                                      String _plus_87 = ("<> ((" + _description_16);
                                      String _plus_88 = (_plus_87 + ") && X (<>((");
                                      String _description_17 = in.getInputAction().get(0).getDescription();
                                      String _plus_89 = (_plus_88 + _description_17);
                                      String _plus_90 = (_plus_89 + ") && X <>( (");
                                      String _description_18 = in.getInputAction().get(0).getDescription();
                                      String _plus_91 = (_plus_90 + _description_18);
                                      String _plus_92 = (_plus_91 + ")))))");
                                      this.template = _plus_92;
                                      String _description_19 = in.getInputAction().get(0).getDescription();
                                      String _plus_93 = ((this.text + "perform ") + _description_19);
                                      String _plus_94 = (_plus_93 + " at least N times");
                                      this.text = _plus_94;
                                    }
                                  }
                                } else {
                                  String _name_45 = in.getPattern().eClass().getName();
                                  boolean _equals_14 = Objects.equal(_name_45, "PastAvoidance");
                                  if (_equals_14) {
                                    boolean _isEmpty_8 = in.getInputAction().isEmpty();
                                    if (_isEmpty_8) {
                                      String _name_46 = in.getInputLocations().get(0).getName();
                                      String _plus_95 = ("((! (" + _name_46);
                                      String _plus_96 = (_plus_95 + ")) U ");
                                      String _description_20 = in.getAffectingEvent().get(0).getDescription();
                                      String _plus_97 = (_plus_96 + _description_20);
                                      String _plus_98 = (_plus_97 + ")");
                                      this.template = _plus_98;
                                      String _name_47 = in.getInputLocations().get(0).getName();
                                      String _plus_99 = ((this.text + "avoid location ") + _name_47);
                                      String _plus_100 = (_plus_99 + " until ");
                                      String _description_21 = in.getAffectingEvent().get(0).getDescription();
                                      String _plus_101 = (_plus_100 + _description_21);
                                      String _plus_102 = (_plus_101 + " occurs");
                                      this.text = _plus_102;
                                    } else {
                                      boolean _isEmpty_9 = in.getInputLocations().isEmpty();
                                      if (_isEmpty_9) {
                                        String _description_22 = in.getInputAction().get(0).getDescription();
                                        String _plus_103 = ("((! (" + _description_22);
                                        String _plus_104 = (_plus_103 + ")) U ");
                                        String _description_23 = in.getAffectingEvent().get(0).getDescription();
                                        String _plus_105 = (_plus_104 + _description_23);
                                        String _plus_106 = (_plus_105 + ")");
                                        this.template = _plus_106;
                                        String _description_24 = in.getInputAction().get(0).getDescription();
                                        String _plus_107 = ((this.text + "avoid performing ") + _description_24);
                                        String _plus_108 = (_plus_107 + " until ");
                                        String _description_25 = in.getAffectingEvent().get(0).getDescription();
                                        String _plus_109 = (_plus_108 + _description_25);
                                        String _plus_110 = (_plus_109 + " occurs");
                                        this.text = _plus_110;
                                      }
                                    }
                                  } else {
                                    String _name_48 = in.getPattern().eClass().getName();
                                    boolean _equals_15 = Objects.equal(_name_48, "UpperRestricedAvoidance");
                                    if (_equals_15) {
                                      boolean _isEmpty_10 = in.getInputAction().isEmpty();
                                      if (_isEmpty_10) {
                                        String _name_49 = in.getInputLocations().get(0).getName();
                                        String _plus_111 = ("! <> ((" + _name_49);
                                        String _plus_112 = (_plus_111 + ") && X (<>((");
                                        String _name_50 = in.getInputLocations().get(0).getName();
                                        String _plus_113 = (_plus_112 + _name_50);
                                        String _plus_114 = (_plus_113 + ") && X <>( (");
                                        String _name_51 = in.getInputLocations().get(0).getName();
                                        String _plus_115 = (_plus_114 + _name_51);
                                        String _plus_116 = (_plus_115 + ")))))");
                                        this.template = _plus_116;
                                        String _name_52 = in.getInputLocations().get(0).getName();
                                        String _plus_117 = ((this.text + "visit location ") + _name_52);
                                        String _plus_118 = (_plus_117 + " at most N times");
                                        this.text = _plus_118;
                                      } else {
                                        boolean _isEmpty_11 = in.getInputLocations().isEmpty();
                                        if (_isEmpty_11) {
                                          String _description_26 = in.getInputAction().get(0).getDescription();
                                          String _plus_119 = ("! <> ((" + _description_26);
                                          String _plus_120 = (_plus_119 + ") && X (<>((");
                                          String _description_27 = in.getInputAction().get(0).getDescription();
                                          String _plus_121 = (_plus_120 + _description_27);
                                          String _plus_122 = (_plus_121 + ") && X <>( (");
                                          String _description_28 = in.getInputAction().get(0).getDescription();
                                          String _plus_123 = (_plus_122 + _description_28);
                                          String _plus_124 = (_plus_123 + ")))))");
                                          this.template = _plus_124;
                                          String _description_29 = in.getInputAction().get(0).getDescription();
                                          String _plus_125 = ((this.text + "perform ") + _description_29);
                                          String _plus_126 = (_plus_125 + " at most N times");
                                          this.text = _plus_126;
                                        }
                                      }
                                    } else {
                                      String _name_53 = in.getPattern().eClass().getName();
                                      boolean _equals_16 = Objects.equal(_name_53, "InstantReaction");
                                      if (_equals_16) {
                                        boolean _isEmpty_12 = in.getInputAction().isEmpty();
                                        if (_isEmpty_12) {
                                          String _description_30 = in.getAffectingEvent().get(0).getDescription();
                                          String _plus_127 = ("[] (" + _description_30);
                                          String _plus_128 = (_plus_127 + " -> ");
                                          String _name_54 = in.getInputLocations().get(0).getName();
                                          String _plus_129 = (_plus_128 + _name_54);
                                          String _plus_130 = (_plus_129 + ")");
                                          this.template = _plus_130;
                                          String _name_55 = in.getInputLocations().get(0).getName();
                                          String _plus_131 = ((this.text + "visit ") + _name_55);
                                          String _plus_132 = (_plus_131 + " every time ");
                                          String _description_31 = in.getAffectingEvent().get(0).getDescription();
                                          String _plus_133 = (_plus_132 + _description_31);
                                          String _plus_134 = (_plus_133 + " occurs");
                                          this.text = _plus_134;
                                        } else {
                                          boolean _isEmpty_13 = in.getInputLocations().isEmpty();
                                          if (_isEmpty_13) {
                                            String _description_32 = in.getAffectingEvent().get(0).getDescription();
                                            String _plus_135 = ("[] (" + _description_32);
                                            String _plus_136 = (_plus_135 + " -> ");
                                            String _description_33 = in.getInputAction().get(0).getDescription();
                                            String _plus_137 = (_plus_136 + _description_33);
                                            String _plus_138 = (_plus_137 + ")");
                                            this.template = _plus_138;
                                            String _description_34 = in.getInputAction().get(0).getDescription();
                                            String _plus_139 = ((this.text + "perform ") + _description_34);
                                            String _plus_140 = (_plus_139 + " every time ");
                                            String _description_35 = in.getAffectingEvent().get(0).getDescription();
                                            String _plus_141 = (_plus_140 + _description_35);
                                            String _plus_142 = (_plus_141 + " occurs");
                                            this.text = _plus_142;
                                          }
                                        }
                                      } else {
                                        String _name_56 = in.getPattern().eClass().getName();
                                        boolean _equals_17 = Objects.equal(_name_56, "DelayedReaction");
                                        if (_equals_17) {
                                          boolean _isEmpty_14 = in.getInputAction().isEmpty();
                                          if (_isEmpty_14) {
                                            String _description_36 = in.getAffectingEvent().get(0).getDescription();
                                            String _plus_143 = ("[] (" + _description_36);
                                            String _plus_144 = (_plus_143 + " -> (<>(");
                                            String _name_57 = in.getInputLocations().get(0).getName();
                                            String _plus_145 = (_plus_144 + _name_57);
                                            String _plus_146 = (_plus_145 + ")))");
                                            this.template = _plus_146;
                                            String _name_58 = in.getInputLocations().get(0).getName();
                                            String _plus_147 = ((this.text + "visit at some point later ") + _name_58);
                                            String _plus_148 = (_plus_147 + " every time ");
                                            String _description_37 = in.getAffectingEvent().get(0).getDescription();
                                            String _plus_149 = (_plus_148 + _description_37);
                                            String _plus_150 = (_plus_149 + " occurs");
                                            this.text = _plus_150;
                                          } else {
                                            boolean _isEmpty_15 = in.getInputLocations().isEmpty();
                                            if (_isEmpty_15) {
                                              String _description_38 = in.getAffectingEvent().get(0).getDescription();
                                              String _plus_151 = ("[] (" + _description_38);
                                              String _plus_152 = (_plus_151 + " -> (<>(");
                                              String _description_39 = in.getInputAction().get(0).getDescription();
                                              String _plus_153 = (_plus_152 + _description_39);
                                              String _plus_154 = (_plus_153 + ")))");
                                              this.template = _plus_154;
                                              String _description_40 = in.getInputAction().get(0).getDescription();
                                              String _plus_155 = ((this.text + "perform  at some point later ") + _description_40);
                                              String _plus_156 = (_plus_155 + " every time ");
                                              String _description_41 = in.getAffectingEvent().get(0).getDescription();
                                              String _plus_157 = (_plus_156 + _description_41);
                                              String _plus_158 = (_plus_157 + " occurs");
                                              this.text = _plus_158;
                                            }
                                          }
                                        } else {
                                          String _name_59 = in.getPattern().eClass().getName();
                                          boolean _equals_18 = Objects.equal(_name_59, "Wait");
                                          if (_equals_18) {
                                            String _name_60 = in.getInputLocations().get(0).getName();
                                            String _plus_159 = ("[] (<> (" + _name_60);
                                            String _plus_160 = (_plus_159 + "))");
                                            this.template = _plus_160;
                                            String _name_61 = in.getInputLocations().get(0).getName();
                                            String _plus_161 = ((this.text + "wait in location ") + _name_61);
                                            this.text = _plus_161;
                                          } else {
                                            String _name_62 = in.getPattern().eClass().getName();
                                            boolean _equals_19 = Objects.equal(_name_62, "SimpleAction");
                                            if (_equals_19) {
                                              String _description_42 = in.getInputAction().get(0).getDescription();
                                              String _plus_162 = ("(X " + _description_42);
                                              String _plus_163 = (_plus_162 + ")");
                                              this.template = _plus_163;
                                              String _description_43 = in.getInputAction().get(0).getDescription();
                                              String _plus_164 = ((this.text + " perform action ") + _description_43);
                                              this.text = _plus_164;
                                            } else {
                                              this.template = "Pattern not recognized";
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      int _size = in.getStoppingEvent().size();
      boolean _greaterThan = (_size > 0);
      if (_greaterThan) {
        for (int i = 0; (i < ((Object[])Conversions.unwrapArray(in.getStoppingEvent(), Object.class)).length); i++) {
          String _get = this.availableRobots.get(robot);
          String _plus_165 = (_get + ",");
          String _plus_166 = (_plus_165 + this.template);
          String _plus_167 = (_plus_166 + ",");
          String _name_63 = in.getStoppingEvent().get(i).getName();
          String _plus_168 = (_plus_167 + _name_63);
          this.stoppingEvents.add(_plus_168);
        }
      }
      Object _xifexpression = null;
      boolean _equals_20 = Objects.equal(hybrid, "");
      if (_equals_20) {
        _xifexpression = Boolean.valueOf(this.robotsList.get(robot).get(index).missionList.add(this.template));
      } else {
        Object _xifexpression_1 = null;
        boolean _equals_21 = Objects.equal(hybrid, "and_left");
        if (_equals_21) {
          _xifexpression_1 = Boolean.valueOf(this.robotsList.get(robot).get(index).missionList.add((this.template + " && ")));
        } else {
          Object _xifexpression_2 = null;
          boolean _equals_22 = Objects.equal(hybrid, "or_left");
          if (_equals_22) {
            _xifexpression_2 = Boolean.valueOf(this.robotsList.get(robot).get(index).missionList.add((this.template + " || ")));
          } else {
            String _xifexpression_3 = null;
            boolean _equals_23 = Objects.equal(hybrid, "right");
            if (_equals_23) {
              int _size_1 = this.robotsList.get(robot).get(index).missionList.size();
              int _minus = (_size_1 - 1);
              int _size_2 = this.robotsList.get(robot).get(index).missionList.size();
              int _minus_1 = (_size_2 - 1);
              String _get = this.robotsList.get(robot).get(index).missionList.get(_minus_1);
              String _plus_165 = (_get + this.template);
              _xifexpression_3 = this.robotsList.get(robot).get(index).missionList.set(_minus, _plus_165);
            }
            _xifexpression_2 = _xifexpression_3;
          }
          _xifexpression_1 = ((Object)_xifexpression_2);
        }
        _xifexpression = ((Object)_xifexpression_1);
      }
      _xblockexpression = ((Object)_xifexpression);
    }
    return _xblockexpression;
  }
  
  public Object doLogic(final Operator in, final int index, final int robot, final int indentation, final String parent, final String hybrid) {
    if (in instanceof ANDOp) {
      return _doLogic((ANDOp)in, index, robot, indentation, parent, hybrid);
    } else if (in instanceof ConditionOp) {
      return _doLogic((ConditionOp)in, index, robot, indentation, parent, hybrid);
    } else if (in instanceof EventHandlerOp) {
      return _doLogic((EventHandlerOp)in, index, robot, indentation, parent, hybrid);
    } else if (in instanceof FallBackOp) {
      return _doLogic((FallBackOp)in, index, robot, indentation, parent, hybrid);
    } else if (in instanceof OROp) {
      return _doLogic((OROp)in, index, robot, indentation, parent, hybrid);
    } else if (in instanceof ParallelOp) {
      return _doLogic((ParallelOp)in, index, robot, indentation, parent, hybrid);
    } else if (in instanceof SequenceOp) {
      return _doLogic((SequenceOp)in, index, robot, indentation, parent, hybrid);
    } else if (in instanceof DelegateOp) {
      return _doLogic((DelegateOp)in, index, robot, indentation, parent, hybrid);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(in, index, robot, indentation, parent, hybrid).toString());
    }
  }
}
