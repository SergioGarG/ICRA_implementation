/*
 * generated by Xtext 2.12.0
 */
package se.gu.co4robots.xtext.promise.generator

import java.util.ArrayList

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import promise.Mission
import promise.Location
import promise.Robot
import promise.Operator
import promise.Event
import promise.Action
import promise.CompositionOperator
import promise.DelegateOp
import promise.FallBackOp
import promise.SequenceOp
import promise.EventHandlerOp
import promise.ParallelOp
import promise.ConditionOp
import promise.ANDOp
import promise.OROp
import promise.Visit
import promise.Patrolling
import promise.InstantReaction
import promise.SimpleAction

import java.util.Iterator


 
///////Robot class//////
public class robotClass{
	public var String name
	public var ArrayList<String> missionList
	public var int indentation
	
	new(String name, ArrayList<String> missionList, int indentation){
		this.name=name
		this.missionList=missionList
		this.indentation=indentation
	}
}
 //////////////////////
 
class PromiseGenerator extends AbstractGenerator {
	
	var robotsList = new ArrayList<ArrayList<robotClass>> //list of named lists of actions 
	var availableRobots= new ArrayList<String> //list with the available robots in a mission
	
	var stoppingEvents= new ArrayList<String> //list with the stopping events in the mission
	
	var textarray = new ArrayList<String> //useful text explaining the mission for the final user
	var text = new String 
	var template = new String 
	
	public override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		for (var i = robotsList.length-1 ; i >= 0; i--) {
			for (var j = robotsList.get(i).length-1 ; j >= 0; j--) robotsList.get(i).remove(j) //Remove all the items of the list to avoid overwritting
		}
 		for (var i = availableRobots.length-1 ; i >= 0; i--) availableRobots.remove(i)
 		for (var i = textarray.length-1 ; i >= 0; i--)	textarray.remove(i)
 		for (var i = stoppingEvents.length-1 ; i >= 0; i--) stoppingEvents.remove(i)
		
		
			for (i:0..<(resource.allContents.filter(Robot).toIterable.length)) {
					availableRobots.add(resource.allContents.filter(Robot).toIterable.get(i).name)
					robotsList.add(new ArrayList<robotClass>)
				}
			

			robotsList.get(0).add(new robotClass(resource.allContents.filter(Robot).toIterable.get(0).name, new ArrayList<String>, 0))
			
			if((resource.allContents.filter(Operator).toIterable.get(0) as CompositionOperator).inputOperators.size > 0){
				doLogic(resource.allContents.filter(Operator).toIterable.get(0), 0, 0, 0, availableRobots.get(0), "") //perform the mission starting from the first robot and the first instantiation of robotClass
			}
			var missionsList=new ArrayList<ArrayList<String>> //list of all the missions within the global mission
			var missions=new ArrayList<String> //list of each missions within the global mission
			
			fsa.generateFile('mission_data.ms', '''
			Robots [ «FOR robot : resource.allContents.filter(Robot).toIterable»«robot.name»,«ENDFOR» ]
			Events [ «FOR condition : resource.allContents.filter(Event).toIterable»«condition.name» «condition.description»,«ENDFOR» ]
			Actions [ «FOR condition : resource.allContents.filter(Action).toIterable»«condition.name» «condition.description»,«ENDFOR» ]
			StoppingEvents [ «FOR j:0..<stoppingEvents.length»{«stoppingEvents.get(j)»}«ENDFOR» ]

			''')
		
		if (robotsList.size > 0){
			for (var i=0; i < availableRobots.length; i++){
				
				fsa.generateFile('mission_'+availableRobots.get(i)+'.ms', '''
				«FOR j:0..<robotsList.get(i).length»
					«IF robotsList.get(i).get(j).indentation == 0»
						«robotsList.get(i).get(j).name»«missions=robotsList.get(i).get(j).missionList»
					«ELSEIF robotsList.get(i).get(j).indentation == 1»
					
						«robotsList.get(i).get(j).name»«missions=robotsList.get(i).get(j).missionList»
					«ELSEIF robotsList.get(i).get(j).indentation == 2»
					
							«robotsList.get(i).get(j).name»«missions=robotsList.get(i).get(j).missionList»
					«ELSEIF robotsList.get(i).get(j).indentation == 3»
					
								«robotsList.get(i).get(j).name»«missions=robotsList.get(i).get(j).missionList»
					«ELSEIF robotsList.get(i).get(j).indentation == 4»
					
									«robotsList.get(i).get(j).name»«missions=robotsList.get(i).get(j).missionList»
					«ELSEIF robotsList.get(i).get(j).indentation == 5»
					
										«robotsList.get(i).get(j).name»«missions=robotsList.get(i).get(j).missionList»
					«ENDIF»
				«ENDFOR»
			''')
			
				if((robotsList.get(i).length > 0) && (textarray.length > 0)){
					fsa.generateFile('readme_mission_'+availableRobots.get(i)+'.txt', '''
						«textarray.get(i)»
						''')
					println(textarray.get(i))
				}
			}
		}

	}
		
		//////////////////////////Methods
		
		def nestedMethod(CompositionOperator in, int index, int suboperator, int robot, int indentation, String parent){
			//if (parent.contains("cond") || parent.contains("eh")) doLogic(in, index, robot, indentation, parent, "")	
			doLogic(in.inputOperators.get(suboperator), index, robot, indentation, parent, "")		
		}
		

		
		///////////////Composition operators
		
		def dispatch doLogic(SequenceOp in, int index, int robot, int indentation, String parent, String hybrid){ 
			var names = new ArrayList<String>
			var int counter 
			if (!robotsList.empty) { 
				for(counter = 0; counter<(robotsList.get(robot).length);counter++) names.add(robotsList.get(robot).get(counter).name)
			}
			for (i : 0..<(in.inputOperators.toArray.length)) {
				if (i>0) text=text+" and "
					nestedMethod(in, index, i, robot, indentation, parent) 
				}
		}
		
		def dispatch doLogic(ParallelOp in, int index, int robot, int indentation, String parent, String hybrid){
			text="Robot "+availableRobots.get(robot)+" does "
			nestedMethod(in, index, 0, robot, indentation, availableRobots.get(robot))
			textarray.add(text)
			var names = new ArrayList<ArrayList<String>>
			var counter = new ArrayList<Integer>
			if (!robotsList.empty) { 
				for(var i = 0; i<(robotsList.length);i++) {
					counter.add(0)
					names.add(new ArrayList<String>)
					for(var j=0; j<(robotsList.get(i).length);j++){
						counter.add(i,j)
						names.get(robot+i).add(robotsList.get(robot+i).get(counter.get(j)).name) 
				}}
			}
			if (in.inputOperators.length > 0){
				for(i : 1..<(in.inputOperators.length)) {
					robotsList.get(robot+i).add(new robotClass(availableRobots.get(robot+i), new ArrayList<String>, indentation))
					names.get(robot+i).add(robotsList.get(robot+i).get(0).name)
					text="Robot "+availableRobots.get(robot+i)+" does "
					nestedMethod(in, names.get(i).indexOf(availableRobots.get(robot+i)), i, robot+i, indentation, availableRobots.get(robot+i))
					textarray.add(text)
				}}
		}
		
		//First version
//		def dispatch doLogic(EventHandlerOp in, int index, int robot, int indentation, String parent, String hybrid){
//			text= text+"by default "
//			robotsList.get(robot).get(index).missionList.add("eh")
//			var int counter = robotsList.get(robot).length
//			robotsList.get(robot).add(new robotClass("eh_default", new ArrayList<String>, indentation+1))
//			nestedMethod(in, counter, 0, robot, indentation+1, "eh_default") //always execute the first operator, the following ones are the associated with events
//			for(var i=1; i<(in.inputOperators.length); i++) {
//				counter = robotsList.get(robot).length
//				robotsList.get(robot).add(new robotClass("eh_"+in.inputObservedEvents.get(i-1).name, new ArrayList<String>, indentation+1))
//				text= text+", and if event "+in.inputObservedEvents.get(i-1).name+" occurs, it will "
//				nestedMethod(in, counter, i, robot, indentation+1, "eh_"+in.inputObservedEvents.get(i-1).name)
//			}
//		}

		//Attempting to simplify the events arguments
//		def dispatch doLogic(EventHandlerOp in, int index, int robot, int indentation, String parent, String hybrid){
//			text= text+"by default "
//			robotsList.get(robot).get(index).missionList.add("eh")
//			var int counter = robotsList.get(robot).length
//			robotsList.get(robot).add(new robotClass("eh_default", new ArrayList<String>, indentation+1))
//			nestedMethod(in, counter, 0, robot, indentation+1, "eh_default") //always execute the first operator, the following ones are the associated with events
//			for(var i=1; i<(in.inputOperators.length); i++) {
//				counter = robotsList.get(robot).length
//				robotsList.get(robot).add(new robotClass("eh_"+in.inputOperators.get(i).affectingEvent.get(0).name, new ArrayList<String>, indentation+1))
//				text= text+", and if event "+in.inputOperators.get(i).affectingEvent.get(0).name+" occurs, it will "
//				nestedMethod(in, counter, i, robot, indentation+1, "eh_"+in.inputOperators.get(i).affectingEvent.get(0).name)
//			}
//		}

		//Third to simplify the events arguments
		def dispatch doLogic(EventHandlerOp in, int index, int robot, int indentation, String parent, String hybrid){
			text= text+"by default "
			robotsList.get(robot).get(index).missionList.add("eh")
			var int counter = robotsList.get(robot).length
			robotsList.get(robot).add(new robotClass("eh_default", new ArrayList<String>, indentation+1))
			nestedMethod(in, counter, 0, robot, indentation+1, "eh_default") //always execute the first operator, the following ones are the associated with events
			for(var i=0; i<(in.inputEvents.length); i++) {
				counter = robotsList.get(robot).length
				robotsList.get(robot).add(new robotClass("eh_"+in.inputEvents.get(i).inputEvent.name, new ArrayList<String>, indentation+1))
				text= text+", and if event "+in.inputEvents.get(i).inputEvent.name+" occurs, it will "
				doLogic(in.inputEvents.get(i).inputOperators, counter, robot, indentation+1, "cond_"+in.inputEvents.get(i).inputEvent.name, "")
			}
		}
		
		def dispatch doLogic(FallBackOp in, int index, int robot, int indentation, String parent, String hybrid){
			robotsList.get(robot).get(index).missionList.add("fb")
			var int counter = robotsList.get(robot).length
			for(var i=1; i<=(in.inputOperators.length); i++) {
				counter = robotsList.get(robot).length
				robotsList.get(robot).add(new robotClass("fb_"+i, new ArrayList<String>, indentation+1))
				if (i>1) text= text+"if it fails, it tries to "
				nestedMethod(in, counter++, i-1, robot, indentation+1, "fb_"+i)
			}	
		}
		
		//First version
//		def dispatch doLogic(ConditionOp in, int index, int robot, int indentation, String parent, String hybrid){
//			robotsList.get(robot).get(index).missionList.add("cond")
//			var int counter = robotsList.get(robot).length
//			for(var i=1; i<=(in.inputOperators.length); i++) {
//				counter = robotsList.get(robot).length
//				robotsList.get(robot).add(new robotClass("cond_"+in.inputEvents.get(i-1).name, new ArrayList<String>, indentation+1))
//				text= text+"if event"+in.inputEvents.get(i-1).name+" holds, it will "
//				nestedMethod(in, counter, i-1, robot, indentation+1, "cond_"+in.inputEvents.get(i-1).name)
//			}
//		}
		
//		//Attempting to simplify the events arguments
//		def dispatch doLogic(ConditionOp in, int index, int robot, int indentation, String parent, String hybrid){
//			robotsList.get(robot).get(index).missionList.add("cond")
//			var int counter = robotsList.get(robot).length
//			for(var i=1; i<=(in.inputOperators.length); i++) {
//				counter = robotsList.get(robot).length
//				robotsList.get(robot).add(new robotClass("cond_"+in.inputOperators.get(i).affectingEvent.get(0).name, new ArrayList<String>, indentation+1))
//				text= text+"if event"+in.inputOperators.get(i).affectingEvent.get(0).name+" holds, it will "
//				nestedMethod(in, counter, i-1, robot, indentation+1, "cond_"+in.inputOperators.get(i).affectingEvent.get(0).name)
//			}
//		}

		//Third attempt to simplify the events arguments
		def dispatch doLogic(ConditionOp in, int index, int robot, int indentation, String parent, String hybrid){
			robotsList.get(robot).get(index).missionList.add("cond")
			var int counter = robotsList.get(robot).length
			for(var i=0; i<(in.inputEvents.length); i++) {
				counter = robotsList.get(robot).length
				robotsList.get(robot).add(new robotClass("cond_"+in.inputEvents.get(i).inputEvent.name, new ArrayList<String>, indentation+1))
				text= text+"if event "+in.inputEvents.get(i).inputEvent.name+" holds, "
				doLogic(in.inputEvents.get(i).inputOperators, counter, robot, indentation+1, "cond_"+in.inputEvents.get(i).inputEvent.name, "")
			}
		}
		
		def dispatch doLogic(ANDOp in, int index, int robot, int indentation, String parent, String hybrid){	 
			doLogic(in.inputOperators.get(0), index, robot, indentation, parent, "and_left")		
			text=text+" and "	
			doLogic(in.inputOperators.get(1), index, robot, indentation, parent, "right")		
		}
		
		def dispatch doLogic(OROp in, int index, int robot, int indentation, String parent, String hybrid){
			doLogic(in.inputOperators.get(0), index, robot, indentation, parent, "or_left")		
			text=text+" or "	
			doLogic(in.inputOperators.get(1), index, robot, indentation, parent, "right")		
		}
		
		/////////////////Delegate operators

		def dispatch doLogic(DelegateOp in, int index, int robot, int indentation, String parent, String hybrid){

////////////////Passing an LTL formula
			
			////Core Movement Patterns
			if(in.pattern.eClass.name == "Visit") {
				template="<> ("+in.inputLocations.get(0).name+")"
				text= text+" visit (without any specific order) locations "+in.inputLocations.get(0).name
				for(var i=1; i<in.inputLocations.length; i++){
					template=template+" && <> ("+in.inputLocations.get(i).name+")"
					text= text+", "+in.inputLocations.get(i).name
				} 	
				
			}
			else if(in.pattern.eClass.name == "FairVisit") {
				template="<> ("+in.inputLocations.get(0).name+")"
				text= text+"visit (without any specific order) locations "
				for(var j=0; j<in.inputLocations.length; j++) {
					if (j==0) {
						for(var i=1; i<in.inputLocations.length; i++) template=template+" && <> ("+in.inputLocations.get(i).name+")" //sets the first line
						template=template+" && [] (("+in.inputLocations.get(j).name+") -> X (((!"+in.inputLocations.get(j).name+") U ("+in.inputLocations.get(j+1).name+")) || ([] (!"+in.inputLocations.get(j).name+"))))"						//sets the first part of the second line
						for(var i=2; i<in.inputLocations.length; i++) template=template+" && (((!"+in.inputLocations.get(j).name+") U ("+in.inputLocations.get(j+1).name+")) || ([] (!"+in.inputLocations.get(j).name+")))"	//Rest of the second line
						text= text+in.inputLocations.get(j).name
					}
					else{
						template=template+" && [] (("+in.inputLocations.get(j).name+") -> X (((!"+in.inputLocations.get(j).name+") U ("+in.inputLocations.get(0).name+")) || ([] (!"+in.inputLocations.get(j).name+"))))"	//subsequent "3rd lines"
						for(var i=1; i<in.inputLocations.length; i++) if (i != j) template=template+" && (((!"+in.inputLocations.get(j).name+") U ("+in.inputLocations.get(i).name+")) || ([] (!"+in.inputLocations.get(j).name+")))"
						text=text+", "+in.inputLocations.get(j).name
					}
				}
				text= text+"the same number of times"
			}
			else if(in.pattern.eClass.name == "OrderderVisit") {
				template="(<> ("+in.inputLocations.get(0).name+")"
				text= text+"visit (with a specific order) locations "
				for(var i=1; i<in.inputLocations.length; i++) template=template+" && ((<> "+in.inputLocations.get(i).name+")" //sets the first line
				for(var i=0; i<in.inputLocations.length; i++) {
					template=template+")"
					text= text+in.inputLocations.get(i).name+", "
				}
				for(var j=in.inputLocations.length-1; j>0; j--){
					for(var i=j-1; i>=0; i--) template=template+" && ((!"+in.inputLocations.get(j).name+") U ("+in.inputLocations.get(i).name+"))"
				}
				
			}	
			else if(in.pattern.eClass.name == "SequencedVisit") {
				template="<> (("+in.inputLocations.get(0).name+")"
				text= text+"visit in sequence locations "
				for(var i=1; i<in.inputLocations.length; i++) template=template+" && (<> ("+in.inputLocations.get(i).name+")" 
				for(var i=0; i<in.inputLocations.length; i++) {
						template=template+")"
						text= text+in.inputLocations.get(i).name+", "
					}
			}	
			else if(in.pattern.eClass.name == "StrictOrderedVisit") {
				template="(<> ("+in.inputLocations.get(0).name+")"
				text= text+"visit (with a strict order) locations "
				for(var i=1; i<in.inputLocations.length; i++) template=template+" && ((<> "+in.inputLocations.get(i).name+")" //sets the first line
				for(var i=0; i<in.inputLocations.length; i++) {
					template=template+")"
					text= text+in.inputLocations.get(i).name+", "
				}
				for(var j=in.inputLocations.length-1; j>0; j--){
					for(var i=j-1; i>=0; i--) template=template+" && ((!"+in.inputLocations.get(j).name+") U ("+in.inputLocations.get(i).name+"))"
				}
				for(var j=in.inputLocations.length-1; j>0; j--){
					for(var i=j-1; i>=0; i--) {
						if (i != j) template=template+" && (!("+in.inputLocations.get(j).name+") U ("+in.inputLocations.get(j).name+" && X(!("+in.inputLocations.get(j).name+") U "+in.inputLocations.get(i).name+")))"
					}
				}
			}
			else if(in.pattern.eClass.name == "Patrolling") {
				template="[] (<> ("+in.inputLocations.get(0).name+")"
				text= text+"patrol locations "+in.inputLocations.get(0).name
				for(var i=1; i<in.inputLocations.length; i++) 	{
					template=template+" && <> ("+in.inputLocations.get(i).name+")"
					text= text+", "+in.inputLocations.get(i).name
				}
				template=template+")"
			}
			else if(in.pattern.eClass.name == "FairPatrolling") {
				template="[] (<> ("+in.inputLocations.get(0).name+")"
				text= text+" patrol (without any specific order) locations "
				for(var j=0; j<in.inputLocations.length; j++) {
					if (j==0) {
						for(var i=1; i<in.inputLocations.length; i++) template=template+" && <> ("+in.inputLocations.get(i).name+")" //sets the first line
						template=template+" && [] (("+in.inputLocations.get(j).name+") -> X (((!"+in.inputLocations.get(j).name+") U ("+in.inputLocations.get(j+1).name+")) || ([] (!"+in.inputLocations.get(j).name+"))))"						//sets the first part of the second line
						for(var i=2; i<in.inputLocations.length; i++) template=template+" && (((!"+in.inputLocations.get(j).name+") U ("+in.inputLocations.get(j+1).name+")) || ([] (!"+in.inputLocations.get(j).name+")))"	//Rest of the second line
						text= text+in.inputLocations.get(j).name
					}
					else{
						template=template+" && [] (("+in.inputLocations.get(j).name+") -> X (((!"+in.inputLocations.get(j).name+") U ("+in.inputLocations.get(0).name+")) || ([] (!"+in.inputLocations.get(j).name+"))))"	//subsequent "3rd lines"
						text=text+", "+in.inputLocations.get(j).name
						for(var i=1; i<in.inputLocations.length; i++) if (i != j)  template=template+" && (((!"+in.inputLocations.get(j).name+") U ("+in.inputLocations.get(i).name+")) || ([] (!"+in.inputLocations.get(j).name+")))"
					}
				}
				template=template+")"
				text= text+"the same number of times"
			}
			else if(in.pattern.eClass.name == "OrderedPatrolling") {
				template="[] (<> (("+in.inputLocations.get(0).name+")"
				text= text+"patrol (with a specific order) locations "
				for(var i=1; i<in.inputLocations.length; i++) template=template+" && <> ("+in.inputLocations.get(i).name+")" //sets the first line
				for(var i=0; i<in.inputLocations.length; i++){
					template=template+")"
					text= text+in.inputLocations.get(i).name+", "
				} 
				for(var j=in.inputLocations.length-1; j>0; j--){
					for(var i=j-1; i>=0; i--) template=template+" && (! ("+in.inputLocations.get(j).name+") U ("+in.inputLocations.get(i).name+"))"
				}
				for(var j=in.inputLocations.length-1; j>0; j--){
					for(var i=j-1; i>=0; i--) template=template+" && [] ("+in.inputLocations.get(j).name+" -> X((! "+in.inputLocations.get(j).name+") U "+in.inputLocations.get(i).name+"))"
				}
			}	
			else if(in.pattern.eClass.name == "StrictOreredPatrolling") {
				template="[] (<> ("+in.inputLocations.get(0).name+")"
				text= text+"patrol (with a strict order) locations "+in.inputLocations.get(0).name
				for(var i=1; i<in.inputLocations.length; i++){
					template=template+" && <> (("+in.inputLocations.get(i).name+")" //sets the first line
					text= text+", "+in.inputLocations.get(i).name
				} 
				for(var i=0; i<in.inputLocations.length; i++) template=template+")"
				for(var j=in.inputLocations.length-1; j>=0; j--){
					for(var i=j-1; i>=0; i--) template=template+" && ((!"+in.inputLocations.get(j).name+") U ("+in.inputLocations.get(i).name+"))"
				}
				for(var j=in.inputLocations.length-1; j>0; j--){
					for(var i=j-1; i>=0; i--) {
						if (i != j) template=template+" && [] ("+in.inputLocations.get(j).name+" -> X((! "+in.inputLocations.get(j).name+") U "+in.inputLocations.get(i).name+"))"
					}
				}
				for(var j=0; j<in.inputLocations.length; j++){
					for(var i=j+1; i<in.inputLocations.length; i++) {
						if (i != j) template=template+" && [] ("+in.inputLocations.get(j).name+" -> X((! "+in.inputLocations.get(j).name+") U ("+in.inputLocations.get(i).name+")))"
					}
				}
			}		
			else if(in.pattern.eClass.name == "SequencedPatrolling") {
				template="[] (<> (("+in.inputLocations.get(0).name+")"
				text= text+"patrol in sequence locations "+in.inputLocations.get(0).name
				for(var i=1; i<in.inputLocations.length; i++){
					template=template+" && <> (("+in.inputLocations.get(i).name+")" 
					text= text+", "+in.inputLocations.get(i).name
				} 
				for(var i=0; i<in.inputLocations.length*2-1; i++) template=template+")"
			}		
			
			////Avoidance patterns
			// ExactRestrictedAvoidance needs to be revised, should have as input an integer containing the number of times the location must be visited
			else if(in.pattern.eClass.name == "ExactRestrictedAvoidance"){
				//template="(! ("+in.inputAction.get(0).name+")) U ("+in.inputAction.get(0).name+" && (X ((! "+in.inputAction.get(0).name+") U ("+in.inputAction.get(0).name+" && (X ((! "+in.inputAction.get(0).name+") U ("+in.inputAction.get(0).name+" && (X ([] (!  "+in.inputAction.get(0).name+"))))))))))"
				if (in.inputAction.isEmpty){
					template="(! ("+in.inputLocations.get(0).name+")) U ("+in.inputLocations.get(0).name+" && (X ((! "+in.inputLocations.get(0).name+") U ("+in.inputLocations.get(0).name+" && (X ((! "+in.inputLocations.get(0).name+") U ("+in.inputLocations.get(0).name+" && (X ([] (!  "+in.inputLocations.get(0).name+"))))))))))"
					text=text+"visit location "+in.inputLocations.get(0).name+" an exact number of times"
				}
				else if (in.inputLocations.isEmpty){
					template="(! ("+in.inputAction.get(0).name+")) U ("+in.inputAction.get(0).name+" && (X ((! "+in.inputAction.get(0).name+") U ("+in.inputAction.get(0).name+" && (X ((! "+in.inputAction.get(0).name+") U ("+in.inputAction.get(0).name+" && (X ([] (!  "+in.inputAction.get(0).name+"))))))))))"
					text=text+"perform "+in.inputAction.get(0).name+" an exact number of times"
				}
			} 
			else if(in.pattern.eClass.name == "FutureAvoidance") {
				if (in.inputAction.isEmpty){
					template="[] (("+in.eventAssigned+ "-> ([] ! ("+in.inputLocations.get(0).name+"))"
					text=text+"avoid location "+in.inputLocations.get(0).name+" if "+in.eventAssigned+" occurs"
				}
				else if (in.inputLocations.isEmpty){
					template="[] (("+in.eventAssigned+ "-> ([] ! ("+in.inputAction.get(0).name+"))"
					text=text+"avoid action "+in.inputAction.get(0).name+" if "+in.eventAssigned+" occurs"
				}
			}
			else if(in.pattern.eClass.name == "GlobalAvoidance") {
				if (in.inputAction.isEmpty){
					template="[] (! ("+in.inputLocations.get(0).name+"))"
					text=text+"avoid location "+in.inputLocations.get(0).name
				}
				else if (in.inputLocations.isEmpty){
					template="[] (! ("+in.inputAction.get(0).name+"))"
					text=text+"avoid action "+in.inputAction.get(0).name
				}				
			}
			// LowerRestricedAvoidance needs to be revised, should have as input an integer containing the number of times the location must be visited
			else if(in.pattern.eClass.name == "LowerRestricedAvoidance") {
				if (in.inputAction.isEmpty){
					template="<> (("+in.inputLocations.get(0).name+ ") && X (<>(("+in.inputLocations.get(0).name+") && X <>( ("+in.inputLocations.get(0).name+")))))"
					text=text+"visit location "+in.inputLocations.get(0).name+" at least N times"
				}
				else if (in.inputLocations.isEmpty){
					template="<> (("+in.inputAction.get(0).name+ ") && X (<>(("+in.inputAction.get(0).name+") && X <>( ("+in.inputAction.get(0).name+")))))"
					text=text+"perform "+in.inputAction.get(0).name+" at least N times"
				}
				
			}
			else if(in.pattern.eClass.name == "PastAvoidance") {
				if (in.inputAction.isEmpty){
					template="((! ("+in.inputLocations.get(0).name+")) U "+in.eventAssigned+")"
					text=text+"avoid location "+in.inputLocations.get(0).name+" until "+in.eventAssigned+" occurs"
				}
				else if (in.inputLocations.isEmpty){
					template="((! ("+in.inputAction.get(0).name+")) U "+in.eventAssigned+")"
					text=text+"avoid performing "+in.inputAction.get(0).name+" until "+in.eventAssigned+" occurs"
				}
			}
			// UpperRestricedAvoidance needs to be revised, should have as input an integer containing the number of times the location must be visited
			else if(in.pattern.eClass.name == "UpperRestricedAvoidance") {
				if (in.inputAction.isEmpty){
					template="! <> (("+in.inputLocations.get(0).name+ ") && X (<>(("+in.inputLocations.get(0).name+") && X <>( ("+in.inputLocations.get(0).name+")))))"
					text=text+"visit location "+in.inputLocations.get(0).name+" at most N times"
				}
				else if (in.inputLocations.isEmpty){
					template="! <> (("+in.inputAction.get(0).name+ ") && X (<>(("+in.inputAction.get(0).name+") && X <>( ("+in.inputAction.get(0).name+")))))"
					text=text+"perform "+in.inputAction.get(0).name+" at most N times"
				}
			}
		
			////Triggers
			else if(in.pattern.eClass.name == "InstantReaction"){
				if (in.inputAction.isEmpty){
					template="[] ("+in.eventAssigned+" -> "+in.inputLocations.get(0).name+")" 
					text=text+"visit "+in.inputLocations.get(0).name+" every time "+in.eventAssigned+" occurs"
				}
				else if (in.inputLocations.isEmpty){
					template="[] ("+in.eventAssigned+" -> "+in.inputAction.get(0).name+")" 
					text=text+"perform "+in.inputAction.get(0).name+" every time "+in.eventAssigned+" occurs"
				}
			} 
			else if(in.pattern.eClass.name == "DelayedReaction") {
				if (in.inputAction.isEmpty){
						template="[] ("+in.eventAssigned+" -> (<>("+in.inputLocations.get(0).name+")))" 
						text=text+"visit at some point later "+in.inputLocations.get(0).name+" every time "+in.eventAssigned+" occurs"
					}
					else if (in.inputLocations.isEmpty){
						template="[] ("+in.eventAssigned+" -> (<>("+in.inputAction.get(0).name+")))" 
						text=text+"perform  at some point later "+in.inputAction.get(0).name+" every time "+in.eventAssigned+" occurs"
				}
			}
			else if(in.pattern.eClass.name == "Wait") {
				//Correct implementation, waiting for Claudio's input
//				if (in.inputAction.isEmpty) template="("+in.inputLocations.get(0).name+") U (true)"
//				else if (in.inputLocations.isEmpty) template="("+in.inputAction.get(0).name+") U (true)"
				//Debug version
				template="[] (<> ("+in.inputLocations.get(0).name+"))"
				text=text+"wait in location "+in.inputLocations.get(0).name
			}
			else if(in.pattern.eClass.name == "SimpleAction"){
				template="(X "+in.inputAction.get(0).name+")"
				text=text+" perform action "+in.inputAction.get(0).name
			} 
		
			else template="Pattern not recognized"
			//println(template)
			
			if(in.stoppingEvent.size() > 0){
				for(var i=0; i<in.stoppingEvent.length; i++){
					stoppingEvents.add(availableRobots.get(robot)+','+template+','+in.stoppingEvent.get(i).name)
				}
			}
			
			if(hybrid == "") robotsList.get(robot).get(index).missionList.add(template)
			else if(hybrid == "and_left") robotsList.get(robot).get(index).missionList.add(template+' && ')
			else if(hybrid == "or_left") robotsList.get(robot).get(index).missionList.add(template+' || ')
			else if(hybrid == "right") {
				robotsList.get(robot).get(index).missionList.set(robotsList.get(robot).get(index).missionList.size-1, robotsList.get(robot).get(index).missionList.get(robotsList.get(robot).get(index).missionList.size-1)+template)
			}
		}
		

		
		/////////////////////////Printing methods
		
//		def ArrayList<ArrayList<String>>  printOut(){
//			var template = new ArrayList<ArrayList<String>>  
//			for (i : 0..<(robotsList.length)) template.add(robotsList.get(robot).get(i).missionList)		 
//			return template
//		}

}