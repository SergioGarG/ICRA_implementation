// automatically generated by Xtext
grammar se.gu.co4robots.xtext.promise.Promise with org.eclipse.xtext.common.Terminals

import "http://gu.se/co4robots.promise" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Mission:
	'mission' '{'
		('conditions' '{' ('events' events+=Event ( "," events+=Event)*)?
				('actions' actions+=Action ( "," actions+=Action)*)? '}')?
		'robots' robots+=Robot ( "," robots+=Robot)* 
		('locations' locations+=Location ( "," locations+=Location)*)?  
		'operators' '{' operator+=Operator ( "," operator+=Operator)* '}' 
	'}';

Operator:
	FallBackOp | SequenceOp | ParallelOp | EventHandlerOp | 
	ConditionOp | DelegateOp | TaskCombinationOp;
	
Tasks:
	SimpleAction | Visit | SequencedVisit | OrderderVisit | 
	StrictOrderedVisit | FairVisit | Patrolling | SequencedPatrolling | 
	OrderedPatrolling | StrictOreredPatrolling | FairPatrolling | 
	UpperRestrictedAvoidance | ExactRestrictedAvoidance | 
	LowerRestrictedAvoidance | FutureAvoidance | GlobalAvoidance | 
	PastAvoidance | Wait | DelayedReaction | InstantReaction;

Robot:
	name=EString;
	
Location:
	name=EString;
	
Event:
	name=ID ':' description=EString; 
	
Action:
	name=ID ':' description=EString;
	
FallBackOp:
	'fallback' '(' inputOperators+=Operator 
	("," inputOperators+=Operator)* ')';

SequenceOp:
	'sequence' '(' inputOperators+=Operator 
	("," inputOperators+=Operator)*')';

ParallelOp:
	{ParallelOp}
	'parallel' '{'(inputRobots+=[Robot|EString] '(' inputOperators+=Operator')' 
	("," inputRobots+=[Robot|EString] '(' inputOperators+=Operator ')')*)?'}';

EventHandlerOp:
	'eventHandler' '(' 
	'default' '(' inputOperators+=Operator ')'
	('except' inputEvents+=EventAssignment)+')';

ConditionOp:
	'condition' '(' 
	('if' inputEvents+=EventAssignment )+')';

DelegateOp:
	'delegate' '(' task=Tasks
		('locations' inputLocations+=[Location|EString]
		("," inputLocations+=[Location|EString])*  )?
		('actions' inputAction+=[Action|EString] 
		( "," inputAction+=[Action|EString])*)? 
		('stoppingEvents' stoppingEvent+=[Event|EString] 
		( "," stoppingEvent+=[Event|EString])*)? ')';

TaskCombinationOp:
	'combination' '(' inputOperators+=Operator 
	(('&' | 'AND' | 'and') inputOperators+=Operator)+ ')';

EventAssignment: 
	inputEvent=[Event|EString] '(' inputOperators=Operator ')';
		
/////////////////////////////////////// Patterns


SimpleAction:
	{SimpleAction}
	'SimpleAction'
	;

////////////// Movement Patterns

Visit:
	{Visit}
	'Visit';
	
SequencedVisit returns SequencedVisit:
	{SequencedVisit}
	'SequencedVisit'
	;

OrderderVisit returns OrderderVisit:
	{OrderderVisit}
	'OrderedVisit'
	;

StrictOrderedVisit returns StrictOrderedVisit:
	{StrictOrderedVisit}
	'StrictOrderedVisit'
	;

FairVisit returns FairVisit:
	{FairVisit}
	'FairVisit'
	;

Patrolling returns Patrolling:
	{Patrolling}
	'Patrolling'
	;

SequencedPatrolling returns SequencedPatrolling:
	{SequencedPatrolling}
	'SequencedPatrolling'
	;

OrderedPatrolling returns OrderedPatrolling:
	{OrderedPatrolling}
	'OrderedPatrolling'
	;

StrictOreredPatrolling returns StrictOreredPatrolling:
	{StrictOreredPatrolling}
	'StrictOrderedPatrolling'
	;

FairPatrolling returns FairPatrolling:
	{FairPatrolling}
	'FairPatrolling'
	;
	
////////////// Avoidance Patterns

UpperRestrictedAvoidance returns UpperRestrictedAvoidance:
	{UpperRestrictedAvoidance}
	'UpperRestrictedAvoidance'
	;

ExactRestrictedAvoidance returns ExactRestrictedAvoidance:
	{ExactRestrictedAvoidance}
	'ExactRestrictedAvoidance'
	;

LowerRestrictedAvoidance returns LowerRestrictedAvoidance:
	{LowerRestrictedAvoidance}
	'LowerRestrictedAvoidance'
	;

FutureAvoidance returns FutureAvoidance:
	{FutureAvoidance}
	'FutureAvoidance'
	;

GlobalAvoidance returns GlobalAvoidance:
	{GlobalAvoidance}
	'GlobalAvoidance'
	;

PastAvoidance returns PastAvoidance:
	{PastAvoidance}
	'PastAvoidance'
	;
	
////////////// Trigger Patterns

Wait returns Wait:
	{Wait}
	'Wait';

DelayedReaction returns DelayedReaction:
	{DelayedReaction}
	'DelayedReaction';

InstantReaction returns InstantReaction:
	{InstantReaction}
	'InstantReaction';



EString returns ecore::EString:
	STRING | ID;
