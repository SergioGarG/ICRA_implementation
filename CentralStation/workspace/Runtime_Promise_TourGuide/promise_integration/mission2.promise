mission{ 
	conditions{
		events:
			e0: "starting_signal_received",
			e1: "people_follow",
			e2: "people_donot_follows"
	   	actions:
	   		a0: "request_attention",
	   		a1: "detect_and_approach_requesting_person",
	   		a2: "detect_and_approach_large_group",
	   		a3: "detect_and_approach_small_group",
			a4: "introduction",
			a5: "greet_guest",
			a6:	"ask_follow",
			a7: "ask_sit",   
			a8: "explain_league",
			a9: "QA_session"}               
	robots robot1
	locations: l0, openArea, audienceArea
	operators {
		parallel( eventHandler ( 
			default ( delegate ( robot robot1 does Wait locations l0 ))			
			except e0 ( sequence (
				delegate ( robot robot1 does Visit locations openArea ) , 
				delegate ( robot robot1 does SimpleAction actions a0 ),
				fallback(
					delegate ( robot robot1 does SimpleAction actions a1 ),
					delegate ( robot robot1 does SimpleAction actions a2 ),
					delegate ( robot robot1 does SimpleAction actions a3 )),
				delegate ( robot robot1 does SimpleAction actions a4 ),
				delegate ( robot robot1 does SimpleAction actions a5 ),
				delegate ( robot robot1 does SimpleAction actions a6 ),
				condition(
					if e1 then(delegate(robot robot1 does Visit locations audienceArea affecting event e1 ) )
					if e2 then(sequence(
						fallback(
							delegate ( robot robot1 does SimpleAction actions a1 ),
							delegate ( robot robot1 does SimpleAction actions a2 ),
							delegate ( robot robot1 does SimpleAction actions a3 )),
						delegate ( robot robot1 does SimpleAction actions a6 ),
						delegate(robot robot1 does Visit locations audienceArea)))),
				delegate ( robot robot1 does SimpleAction actions a7 ),
				delegate ( robot robot1 does SimpleAction actions a8 ),
				delegate ( robot robot1 does SimpleAction actions a9 ) affecting event e0
			) ) 
		)  )

					
 
	}
}
   