mission{ 
	conditions{ 
		events
 		intruder: "description of event intruder",
		 found_object: "description of event  found_object",
		 help_requested: "description of event  help_requested",
		 r1_low_battery: "description of event  r1_low_battery",
		 r2_low_battery: "description of event  r2_low_battery",
		 finish: "description of event  finish"
		actions
 		raise_alarm: "description of action raise_alarm",
		 request_help: "description of action  request_help",
		 grasp_object: "description of action  grasp_object",
		 release_object: "description of action  release_object",
		 charge_battery: "description of action  charge_battery"

	} 
	robots r1, r2
	locations l1, l2, l3, l4, office1, office2, chargingdock
	operators{ parallel{ 
		// Your operators come here
		r1 ( 
			
			eventHandler( 
				default( 
					delegate ( 
						SequencedPatrolling locations l1, l2, l3 stoppingEvents finish)) 
				except intruder(
					delegate ( SimpleAction actions raise_alarm)) 
			
			
			except found_object ( delegate ( SimpleAction actions request_help ) ) 
			except r1_low_battery ( 
				sequence ( 
					delegate ( Visit locations chargingdock ) , 
					delegate ( SimpleAction actions charge_battery )
				)
			)
		) ) , 
		r2 ( eventHandler ( 
			default ( delegate ( Wait locations l4 ) ) 
			except help_requested ( 
				sequence ( 
					delegate ( Visit locations l2 ) , 
					delegate ( SimpleAction actions grasp_object ) , fallback ( delegate ( Visit locations office1 ) , delegate ( Visit locations office2 ) ) , delegate ( SimpleAction actions release_object )
				)
			) 
			except r2_low_battery ( 
				sequence ( 
					delegate ( Visit locations chargingdock ) , 
					delegate ( SimpleAction actions charge_battery )
				)
			)
		) ) }
	}
}